<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azure.Bicep.Decompiler</name>
    </assembly>
    <members>
        <member name="T:Bicep.Decompiler.DecompilerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bicep.Decompiler.DecompilerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bicep.Decompiler.DecompilerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bicep.Decompiler.DecompilerResources.DecompilerDisclaimerMessage">
             <summary>
               Looks up a localized string similar to WARNING: Decompilation is a best-effort process, as there is no guaranteed mapping from ARM JSON to Bicep Template or Bicep Parameters.
            You may need to fix warnings and errors in the generated bicep/bicepparam file(s), or decompilation may fail entirely if an accurate conversion is not possible.
            If you would like to report any issues or inaccurate conversions, please see https://github.com/Azure/bicep/issues..
             </summary>
        </member>
        <member name="M:Bicep.Decompiler.TemplateConverter.GetModuleFromId(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Used to generate the module's templateSpec format from the id parameter.
            </summary>
        </member>
        <member name="M:Bicep.Decompiler.TemplateConverter.ProcessUnnamedCopySyntax``1(``0,System.String,System.Func{``0,Bicep.Core.Syntax.SyntaxBase},Newtonsoft.Json.Linq.JToken)">
            <summary>
            Used to generate a for-expression for a copy loop, where the copyIndex does not accept a 'name' parameter.
            </summary>
        </member>
        <member name="M:Bicep.Decompiler.TemplateConverter.ProcessNamedCopySyntax``1(``0,System.String,System.Func{``0,Bicep.Core.Syntax.SyntaxBase},Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Used to generate a for-expression for a copy loop, where the copyIndex requires a 'name' parameter.
            </summary>
        </member>
        <member name="T:Bicep.Core.Decompiler.Rewriters.ForExpressionSimplifierRewriter">
             <summary>
             Looks for syntax of form (commonly generated by the decompiler):
               for {index} in range(0, length({array}))
             Where elements are being accessed via:
               {array}[{index}]
            
             Rewrites this syntax instead to:
               for {item} in {array}
             Where elements are accessed via:
               {item}
             </summary>
        </member>
    </members>
</doc>
