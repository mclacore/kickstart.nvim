<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azure.Bicep.Core</name>
    </assembly>
    <members>
        <member name="T:Bicep.Core.Analyzers.Interfaces.IBicepAnalyzerRule">
            <summary>
            Implementing IBicepAnalyzer Rule requires
            the implementing class to have a parameterless
            constructor which can be discovered through
            reflection
            </summary>
            <remarks>Do not rename or move this type to a different namespace.
            We are using a source generator that requires the fully qualified type name of this interface to not change.</remarks>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.ApiVersions.AzureResourceApiVersion.ApiVersionPattern">
            <remarks>
            Pattern:<br/>
            <code>^((?&lt;date&gt;(\\d{4}-\\d{2}-\\d{2}))(?&lt;suffix&gt;-(preview|alpha|beta|rc|privatepreview))?$)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "date" capture group.<br/>
                ○ Match a Unicode digit exactly 4 times.<br/>
                ○ Match '-'.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
                ○ Match '-'.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ Optional (greedy).<br/>
                ○ "suffix" capture group.<br/>
                    ○ Match '-'.<br/>
                    ○ Match with 5 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Pp].<br/>
                            ○ Match a character in the set [Rr].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Vv].<br/>
                            ○ Match a character in the set [Ii].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Ww].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Aa].<br/>
                            ○ Match a character in the set [Ll].<br/>
                            ○ Match a character in the set [Pp].<br/>
                            ○ Match a character in the set [Hh].<br/>
                            ○ Match a character in the set [Aa].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Bb].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Tt].<br/>
                            ○ Match a character in the set [Aa].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Rr].<br/>
                            ○ Match a character in the set [Cc].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Pp].<br/>
                            ○ Match a character in the set [Rr].<br/>
                            ○ Match a character in the set [Ii].<br/>
                            ○ Match a character in the set [Vv].<br/>
                            ○ Match a character in the set [Aa].<br/>
                            ○ Match a character in the set [Tt].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Pp].<br/>
                            ○ Match a character in the set [Rr].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Vv].<br/>
                            ○ Match a character in the set [Ii].<br/>
                            ○ Match a character in the set [Ee].<br/>
                            ○ Match a character in the set [Ww].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.FindPossibleSecretsVisitor.FindPossibleSecretsInExpression(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Searches in an expression for possible references to sensitive data, such as secure parameters or list* functions (many but
            not all of which return sensitive information)
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.LinterExpressionHelper.TryGetEvaluatedStringLiteral(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Tries to retrieve a string literal from the expression. Will evaluate variables and parameter default values
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.LinterExpressionHelper.TryFindResourceByNameExpression(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Attempts to find a resource with the same name as the given expression
            </summary>
            <remarks>This is not intended to be foolproof, but simply to handle common scenarios</remarks>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.TypeExtensions.IsString(Bicep.Core.TypeSystem.TypeSymbol)">
            <summary>
            True if the given type symbol is a string type (and not "any")
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.TypeExtensions.IsNullableString(Bicep.Core.TypeSystem.TypeSymbol)">
            <summary>
            True if the given type symbol is a nullable string type (and not "any")
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Common.TypeExtensions.IsObject(Bicep.Core.TypeSystem.TypeSymbol)">
            <summary>
            True if the given type symbol is an object type (and not "any")
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.FormatMessage(System.Object[])">
            <summary>
            Override to implement detailed message for rule
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.GetMessage(System.Object[])">
            <summary>
            Gets a message using the supplied parameter values (if any).
            Otherwise returns the rule description
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.AnalyzeInternal(Bicep.Core.Semantics.SemanticModel,System.IServiceProvider,Bicep.Core.Diagnostics.DiagnosticLevel)">
            <summary>
            Abstract method each rule must implement to provide analyzer
            diagnostics through the Analyze API
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.AnalyzeInternal(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Diagnostics.DiagnosticLevel)">
            <summary>
            Abstract method each rule must implement to provide analyzer
            diagnostics through the Analyze API
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.GetConfigurationValue``1(Bicep.Core.Configuration.AnalyzersConfiguration,System.String,``0)">
            <summary>
            Get a setting from defaults or local override
            Expectation: key names for settings are lower case
            </summary>
            <typeparam name="T">The type of the value to convert to.</typeparam>
            <param name="configuration">The configuration of the model being analyzed.</param>
            <param name="key">The linter configuration key.</param>
            <param name="defaultValue">The default value to use if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.CreateDiagnosticForSpan(Bicep.Core.Diagnostics.DiagnosticLevel,Bicep.Core.Parsing.TextSpan)">
            <summary>
             Create a simple diagnostic that displays the defined Description
             of the derived rule.
            </summary>
            <param name="level"></param>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.LinterRuleBase.CreateDiagnosticForSpan(Bicep.Core.Diagnostics.DiagnosticLevel,Bicep.Core.Parsing.TextSpan,System.Object[])">
            <summary>
            Create a diagnostic message for a span that has a customized string
            formatter defined in the deriving class.
            </summary>
            <param name="level"></param>
            <param name="span"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.ArtifactsParametersRule.TemplateLinkReferencePattern">
            <remarks>
            Pattern:<br/>
            <code>deployment\\(.*\\.templatelink</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Yy].<br/>
            ○ Match a character in the set [Mm].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match '('.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Mm].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match a character in the set [Ii].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Kk\u212A].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.LocationRuleBase.TryGetLiteralTextValueAndDefiningVariable(Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Semantics.SemanticModel)">
            <summary>
            Retrieves the literal text value of a syntax node if that node is either a string literal or a reference (possibly indirectly)
            to a variable whose value is a literal text value.  If it is a reference to a variable with literal text value, also retrieves the
            variable definition for it.
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.LocationRuleBase.TryGetParameterDefinitionsForConsumedModule(Bicep.Core.Syntax.ModuleDeclarationSyntax,Bicep.Core.Semantics.SemanticModel)">
             <summary>
             Returns the parameters defined in a consumed module's bicep file
            
             E.g. For this consumed module declaration:
            
                module m1 'module1.bicep' { ... }
            
             It retrieves the parameters defined in module1.bicep
             </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.LocationRuleBase.GetParametersUsedInResourceLocations(System.Collections.Generic.Dictionary{Bicep.Core.Workspaces.ISourceFile,System.Collections.Immutable.ImmutableArray{Bicep.Core.Semantics.ParameterSymbol}},Bicep.Core.Workspaces.BicepFile,Bicep.Core.Semantics.SemanticModel)">
            <summary>
            Finds all parameters that are used inside the 'location' value of any resource in the file
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.LocationRuleBase.GetLocationRelatedParametersForModule(System.Collections.Generic.Dictionary{Bicep.Core.Workspaces.ISourceFile,System.Collections.Immutable.ImmutableArray{Bicep.Core.Semantics.ParameterSymbol}},Bicep.Core.Syntax.ModuleDeclarationSyntax,Bicep.Core.Semantics.SemanticModel,System.Collections.Immutable.ImmutableArray{Bicep.Core.Syntax.ParameterDeclarationSyntax},System.Boolean)">
            <summary>
            For a module, retrieves public parameters that are related to resource locations, meaning either:
              The parameter default contains resourceGroup().location or deployment().location
              The parameter is used inside any resource's top-level location property
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.LocationRuleBase.GetParameterValuesForModuleLocationParameters(System.Collections.Generic.Dictionary{Bicep.Core.Workspaces.ISourceFile,System.Collections.Immutable.ImmutableArray{Bicep.Core.Semantics.ParameterSymbol}},Bicep.Core.Syntax.ModuleDeclarationSyntax,Bicep.Core.Semantics.SemanticModel,System.Boolean)">
            <summary>
            For a module declaration (consumed module), finds all values passed in to all the module's
            location-related parameters (via the declaration's 'params' object).
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.NoHardcodedLocationRule.GetUnusedTopLevelName(System.String,Bicep.Core.Semantics.SemanticModel)">
            <summary>
            Find a name starting with `baseName` that is not already used as a top-level definition
            </summary>
        </member>
        <member name="M:Bicep.Core.Analyzers.Linter.Rules.NoUnusedRuleBase.GetCodeFixDescription(System.String)">
            <summary>
            Abstract method each rule must implement to get description of code fix
            </summary>
        </member>
        <member name="T:Bicep.Core.ArmHelpers.TemplateVariablesEvaluator">
            <summary>
            Allows the evaluation of ARM template variables that do not refer to parameter values.
            </summary>
        </member>
        <member name="P:Bicep.Core.CodeAction.CodeFix.IsPreferred">
            <summary>
            Marks this as preferred. Only useful for the language server.
            In VSCode, preferred actions are used by the "auto fix" command and can be targeted by keybindings.
            </summary>
        </member>
        <member name="T:Bicep.Core.Collections.Trees.IntervalTree`1">
            <summary>
            An augumented red-black tree that holds intervals [start, end].
            For reference, see chapter 14.3 of <see href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">Introduction to Algorithms (3rd Edition)</see>.
            </summary>
            <typeparam name="TData">The tree node payload data type.</typeparam>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Traverse">
            <summary>
            Performs an in-order traversal for the tree and returns the nodes traversed.
            </summary>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Traverse(Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            Performs an in-order traversal for the sub-tree rooted at node and returns the nodes traversed.
            </summary>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Insert(Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            Insert a node to the tree in O(lg n).
            </summary>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Delete(Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            Delete a node from the tree in O(lg n).
            </summary>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Rotate(Bicep.Core.Collections.Trees.IntervalTreeNode{`0},Bicep.Core.Collections.Trees.BinaryTreeIndexer)">
            <summary>
            Perform a <see href="https://en.wikipedia.org/wiki/Tree_rotation">tree rotation</see>.
            If indexer is <see cref="F:Bicep.Core.Collections.Trees.BinaryTreeIndexer.Default">BinaryTreeIndexer.Default</see>, the rotation is a left-rotation.
            If indexer is <see cref="F:Bicep.Core.Collections.Trees.BinaryTreeIndexer.Inverted">BinaryTreeIndexer.Inverted</see>, the rotation is a right-rotation.
            </summary>
            <param name="node">The root node of the tree to rotate.</param>
            <param name="indexer">The indexer that controls the rotation direction.</param>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.Transplant(Bicep.Core.Collections.Trees.IntervalTreeNode{`0},Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            Within the current tree, replace a sub-tree whose root is node by a sub-tree whose root is subsitution.
            </summary>
            <param name="node">The root of the sub-tree to be replaced.</param>
            <param name="subsitution">The root of the sub-tree to transplant.</param>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.FixAdjancentRed(Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            The method is called after an insertion to fix the violation to the red-black tree property that
            if a node is red, then both its children are black (no adjancent red nodes).
            </summary>
            <param name="node">The node to fix.</param>
        </member>
        <member name="M:Bicep.Core.Collections.Trees.IntervalTree`1.FixExtraBlack(Bicep.Core.Collections.Trees.IntervalTreeNode{`0})">
            <summary>
            The method is called after a deletion to fix a doubly-black or red-or-black node.
            </summary>
            <param name="node">The node to fix.</param>
        </member>
        <member name="T:Bicep.Core.Configuration.CredentialType">
            <summary>
            Represents type of credential used for authentication when restoring external modules.
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.Environment">
            <summary>
            Enables authentication via specific AZURE_* environment variables.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.environmentcredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.ManagedIdentity">
            <summary>
            Enables authentication via a managed identity configured in the deployment environment.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.managedidentitycredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.VisualStudio">
            <summary>
            Enables authentication via Visual Studio account sign-in.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.visualstudiocredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.VisualStudioCode">
            <summary>
            Enables authentication via Visual Studio Code sign-in.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.visualstudiocodecredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.AzureCLI">
            <summary>
            Enables authentication via token obtained from Azure CLI.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.azureclicredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="F:Bicep.Core.Configuration.CredentialType.AzurePowerShell">
            <summary>
            Enables authentication via token obtained from Azure PowerShell.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/azure.identity.azurepowershellcredential?view=azure-dotnet"/>
            </summary>
        </member>
        <member name="M:Bicep.Core.Configuration.IConfigurationManager.GetConfiguration(System.Uri)">
            <summary>
            Gets the configuration for the source file with the given URI.
            If no custom configuration is found, the built-in configuration is returned.
            </summary>
            <param name="sourceFileUri">The URI of the source file to get configuration for.</param>
            <returns>The configuration for the source file.</returns>
        </member>
        <member name="M:Bicep.Core.Configuration.IConfigurationManager.GetBuiltInConfiguration">
            <summary>
            Gets the built-in configuration.
            </summary>
            <returns>The built-in configuration.</returns>
        </member>
        <member name="M:Bicep.Core.Configuration.ModuleAliasesConfiguration.ModuleAliasNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9-_]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Configuration.ProviderAliasesConfiguration.ProviderAliasNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9-_]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Bicep.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.AdminUsernameShouldNotBeLiteralRuleDescription">
            <summary>
              Looks up a localized string similar to Property &apos;adminUserName&apos; should not use a literal value. Use a param instead..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ArtifactsLocationRule_Error_ParamMissing">
            <summary>
              Looks up a localized string similar to If an &apos;{0}&apos; parameter is provided, an &apos;{1}&apos; parameter must also be provided..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ArtifactsLocationRule_Error_ParamMustBeSecure">
            <summary>
              Looks up a localized string similar to Artifacts parameter &apos;{0}&apos; must use the @secure() attribute.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ArtifactsLocationRule_Error_ParamMustBeType">
            <summary>
              Looks up a localized string similar to Artifacts parameter &apos;{0}&apos; must be of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ArtifactsLocationRule_FixTitle_ChangeType">
            <summary>
              Looks up a localized string similar to Change parameter type to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.BicepConfigCustomSettingsFoundFormatMessage">
            <summary>
              Looks up a localized string similar to Custom bicepconfig.json file found ({0})..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.BicepConfigNoCustomSettingsMessage">
            <summary>
              Looks up a localized string similar to No bicepconfig.json found for configuration override..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.DecompilerImperfectionsRule_Description">
            <summary>
              Looks up a localized string similar to Some decompiler imperfections may need to be cleaned up manually.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.DecompilerImperfectionsRule_MayWantToRename">
            <summary>
              Looks up a localized string similar to Consider renaming it and removing the suffix (using the editor&apos;s rename functionality)..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.DecompilerImperfectionsRule_Resource">
            <summary>
              Looks up a localized string similar to The symbolic name of resource &apos;{0}&apos; appears to have originated from a naming conflict during a decompilation from JSON..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.DecompilerImperfectionsRule_Variable">
            <summary>
              Looks up a localized string similar to The name of variable &apos;{0}&apos; appears to have originated from a naming conflict during a decompilation from JSON..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.EnvironmentUrlHardcodedRuleDescription">
            <summary>
              Looks up a localized string similar to Environment URLs should not be hardcoded. Use the environment() function to ensure compatibility across clouds..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_Asserts">
            <summary>
              Looks up a localized string similar to Asserts.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_DynamicTypeLoading">
            <summary>
              Looks up a localized string similar to Dynamic type loading.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_Extensibility">
            <summary>
              Looks up a localized string similar to Extensibility.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_ExtensionRegistry">
            <summary>
              Looks up a localized string similar to Extension registry.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_OptionalModuleNames">
            <summary>
              Looks up a localized string similar to Enable optional module names.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_ResourceDerivedTypes">
            <summary>
              Looks up a localized string similar to Resource-derived types.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_ResourceTypedParamsAndOutputs">
            <summary>
              Looks up a localized string similar to Resource-typed parameters and outputs.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_SourceMapping">
            <summary>
              Looks up a localized string similar to Source mapping.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_SymbolicNameCodegen">
            <summary>
              Looks up a localized string similar to Symbolic name code generation.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ExperimentalFeatureNames_TestFramework">
            <summary>
              Looks up a localized string similar to Test framework.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.InterpolateNotConcatFixTitle">
            <summary>
              Looks up a localized string similar to Use string interpolation.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.InterpolateNotConcatRuleDescription">
            <summary>
              Looks up a localized string similar to Use string interpolation instead of the concat function..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.LinterDisabledFormatMessage">
            <summary>
              Looks up a localized string similar to Linter is disabled in settings file located at {0} .
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.LinterRuleExceptionMessageFormat">
            <summary>
              Looks up a localized string similar to Analyzer &apos;{0}&apos; encountered an unexpected exception. {1}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.LocationSetByParameterRuleDescription">
            <summary>
              Looks up a localized string similar to Resource location should be specified by a parameter without a default value or one that defaults to &apos;global&apos; or resourceGroup().location..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberAssertsRuleDescription">
            <summary>
              Looks up a localized string similar to Maximum number of &apos;assert&apos; statements used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberAssertsRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Too many predeployment conditions. Number of &apos;assert&apos; statements is limited to {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberOutputsRuleDescription">
            <summary>
              Looks up a localized string similar to Maximum number of outputs used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberOutputsRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Too many outputs. Number of outputs is limited to {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberParametersRuleDescription">
            <summary>
              Looks up a localized string similar to Maximum number of parameters used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberParametersRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Too many parameters. Number of parameters is limited to {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberResourcesRuleDescription">
            <summary>
              Looks up a localized string similar to Maximum number of resources used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberResourcesRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Too many resources. Number of resources is limited to {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberVariablesRuleDescription">
            <summary>
              Looks up a localized string similar to Maximum number of variables used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.MaxNumberVariablesRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Too many variables. Number of variables is limited to {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoConflictingMetadataRuleDescription">
            <summary>
              Looks up a localized string similar to Metadata properties whose value is set by a separate decorator should not be set via the &apos;@metadata()&apos; decorator..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoConflictingMetadataRuleMessageFormat">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; metadata property conflicts with the &quot;{1}&quot; decorator and will be overwritten..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoDeploymentsResourcesRuleDescription">
            <summary>
              Looks up a localized string similar to Bicep modules are recommended instead of representing nested or linked deployments as a resource..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoDeploymentsResourcesRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Resource &apos;{0}&apos; of type &apos;{1}&apos; should instead be declared as a Bicep module..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ErrorChangeVarToParam">
            <summary>
              Looks up a localized string similar to A resource location should not use a hard-coded string or variable value. Change variable &apos;{0}&apos; into a parameter instead..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ErrorForModuleParam">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; may be used as a resource location in the module and should not be assigned a hard-coded string or variable value..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ErrorForResourceLocation">
            <summary>
              Looks up a localized string similar to A resource location should not use a hard-coded string or variable value..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ErrorSolution">
            <summary>
              Looks up a localized string similar to Please use a parameter value, an expression, or the string &apos;{0}&apos;. Found: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_FixChangeVarToParam">
            <summary>
              Looks up a localized string similar to Change variable &apos;{0}&apos; into a parameter instead.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_FixNewParam">
            <summary>
              Looks up a localized string similar to Create new parameter &apos;{0}&apos; with default value {1}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ModuleLocationNeedsExplicitValue">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; of module &apos;{1}&apos; isn&apos;t assigned an explicit value, and its default value may not give the intended behavior for a location-related parameter. You should assign an explicit value to the parameter..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocation_ResourceLocationShouldBeExpressionOrGlobal">
            <summary>
              Looks up a localized string similar to A resource location should be either an expression or the string &apos;{0}&apos;. Found &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoHardcodedLocationRuleDescription">
            <summary>
              Looks up a localized string similar to A resource&apos;s location should not use a hard-coded string or variable value. It should use a parameter, an expression, or the string &apos;global&apos;..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoLocExprOutsideParamsRuleDescription">
            <summary>
              Looks up a localized string similar to Functions resourceGroup().location and deployment().location should only be used as the default value of a parameter..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoLocExprOutsideParamsRuleError">
            <summary>
              Looks up a localized string similar to Use a parameter here instead of &apos;{0}&apos;. &apos;resourceGroup().location&apos; and &apos;deployment().location&apos; should only be used as a default value for parameters..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoSymbolicReferencesInInnerScopedDeploymentResourcesDescription">
            <summary>
              Looks up a localized string similar to Nested deployment resources cannot refer to top-level symbols from within the &apos;template&apos; property when inner-scoped evaluation is used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoSymbolicReferencesInInnerScopedDeploymentResourcesMessageFormat">
            <summary>
              Looks up a localized string similar to The symbol &quot;{0}&quot; is declared in the context of the outer deployment and cannot be accessed by expressions within a nested deployment template that uses inner scoping for expression evaluation..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoUnnecessaryDependsOnRuleCodeFix">
            <summary>
              Looks up a localized string similar to Remove unneccessary dependsOn.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoUnnecessaryDependsOnRuleDescription">
            <summary>
              Looks up a localized string similar to No unnecessary dependsOn..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.NoUnnecessaryDependsOnRuleMessage">
            <summary>
              Looks up a localized string similar to Remove unnecessary dependsOn entry &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.OutputsShouldNotContainSecretsFunction">
            <summary>
              Looks up a localized string similar to function &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.OutputsShouldNotContainSecretsMessageFormat">
            <summary>
              Looks up a localized string similar to {0} Found possible secret: {1}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.OutputsShouldNotContainSecretsOutputName">
            <summary>
              Looks up a localized string similar to output name &apos;{0}&apos; suggests a secret.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.OutputsShouldNotContainSecretsRuleDescription">
            <summary>
              Looks up a localized string similar to Outputs should not contain secrets..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.OutputsShouldNotContainSecretsSecureParam">
            <summary>
              Looks up a localized string similar to secure value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ParameterMustBeUsedRuleDescription">
            <summary>
              Looks up a localized string similar to All parameters must be used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ParameterMustBeUsedRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; is declared but never used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.PossibleSecretMessageFunction">
            <summary>
              Looks up a localized string similar to function &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.PossibleSecretMessageSecureParam">
            <summary>
              Looks up a localized string similar to secure value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.PreferUnquotedPropertyNames_DeclarationFixTitle">
            <summary>
              Looks up a localized string similar to Remove quotes from property name &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.PreferUnquotedPropertyNames_DereferenceFixTitle">
            <summary>
              Looks up a localized string similar to Replace array syntax with &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.PreferUnquotedPropertyNamesRule_Description">
            <summary>
              Looks up a localized string similar to Property names that are valid identifiers should be declared without quotation marks and accessed using dot notation..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ProtectCommandToExecuteSecretsRuleDescription">
            <summary>
              Looks up a localized string similar to Use protectedSettings for commandToExecute secrets.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.ProtectCommandToExecuteSecretsRuleMessage">
            <summary>
              Looks up a localized string similar to Use protectedSettings for commandToExecute secrets. Found possible secret: {0}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecretsInParamsRule_Description">
            <summary>
              Looks up a localized string similar to Parameters that represent secrets must be secure..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecretsInParamsRule_MessageFormat">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; may represent a secret (according to its name) and must be declared with the &apos;@secure()&apos; attribute..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParameterDefaultFixTitle">
            <summary>
              Looks up a localized string similar to Remove insecure default value.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParameterDefaultRuleDescription">
            <summary>
              Looks up a localized string similar to Secure parameters should not have hardcoded defaults (except for empty or newGuid())..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParamsInNestedDeployRule_Description">
            <summary>
              Looks up a localized string similar to Outer-scoped nested deployment resources should not be used for secure parameters or list* functions..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParamsInNestedDeployRule_Message_ListFunction">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an outer scoped nested deployment that calls a list* function (&quot;{1}&quot;), which could expose sensitive values in deployment history..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParamsInNestedDeployRule_Message_SecureParams">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an outer scoped nested deployment that accesses secure string parameters ({1}), which could expose their values in deployment history..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SecureParamsInNestedDeployRule_Solution">
            <summary>
              Looks up a localized string similar to Either set the deployment&apos;s properties.expressionEvaluationOptions.scope to &apos;inner&apos; or use a Bicep module instead..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SimplifyInterpolationFixTitle">
            <summary>
              Looks up a localized string similar to Remove unnecessary string interpolation.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SimplifyInterpolationRuleDescription">
            <summary>
              Looks up a localized string similar to Remove unnecessary string interpolation..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SimplifyJsonNullFixTitle">
            <summary>
              Looks up a localized string similar to Simplify json(&apos;null&apos;) to null.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.SimplifyJsonNullRuleDescription">
            <summary>
              Looks up a localized string similar to Simplify json(&apos;null&apos;) to null.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UnusedExistingResourceRuleDescription">
            <summary>
              Looks up a localized string similar to All existing resources must be used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UnusedExistingResourceRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Existing resource &quot;{0}&quot; is declared but never used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UnusedVariableRuleDescription">
            <summary>
              Looks up a localized string similar to All variables must be used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UnusedVariableRuleMessageFormat">
            <summary>
              Looks up a localized string similar to Variable &quot;{0}&quot; is declared but never used..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseParentPropertyRule_CodeFix">
            <summary>
              Looks up a localized string similar to Use parent property.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseParentPropertyRule_Description">
            <summary>
              Looks up a localized string similar to Use the parent property instead of formatting child resource names with &apos;/&apos; characters..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseParentPropertyRule_MessageFormat">
            <summary>
              Looks up a localized string similar to Resource &quot;{0}&quot; has its name formatted as a child of resource &quot;{1}&quot;. The syntax can be simplified by using the parent property..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_AcceptableVersions">
            <summary>
              Looks up a localized string similar to Acceptable versions: {0}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_Description">
            <summary>
              Looks up a localized string similar to Use recent API versions.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_ErrorMessageFormat">
            <summary>
              Looks up a localized string similar to Use more recent API version for &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_Fix_ReplaceApiVersion">
            <summary>
              Looks up a localized string similar to Replace with {0}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_MoreRecentStable">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is a preview version and there is a more recent non-preview version available..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_StableWithSameDate">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is a preview version and there is a non-preview version available with the same date..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_TooOld">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is {1} days old, should be no more than {2} days old, or the most recent..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_UnknownType">
            <summary>
              Looks up a localized string similar to Could not find resource type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_UnknownTypeSuggestion">
            <summary>
              Looks up a localized string similar to Did you mean &quot;{0}&quot;?.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentApiVersionRule_UnknownVersion">
            <summary>
              Looks up a localized string similar to Could not find apiVersion {0} for {1}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModulesVersionRule_CouldNotDownload">
            <summary>
              Looks up a localized string similar to Could not download available module versions: {0}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModulesVersionRule_MostRecentVersion">
            <summary>
              Looks up a localized string similar to The most recent version is {0}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModulesVersionRule_NotCached">
            <summary>
              Looks up a localized string similar to Available module versions have not yet been downloaded. If running from the command line, be sure --no-restore is not specified..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModuleVersionRule_ErrorMessageFormat">
            <summary>
              Looks up a localized string similar to Use a more recent version of module &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModuleVersionRule_Fix_ReplaceWithMostRecent">
            <summary>
              Looks up a localized string similar to Replace with most recent version &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseRecentModuleVersionsRule_Description">
            <summary>
              Looks up a localized string similar to Use recent module versions.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceIdFunctionsRule_Description">
            <summary>
              Looks up a localized string similar to Properties representing a resource ID must be generated appropriately..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceIdFunctionsRule_MessageFormat">
            <summary>
              Looks up a localized string similar to If property &quot;{0}&quot; represents a resource ID, it must use a symbolic resource reference, be a parameter or start with one of these functions: {1}..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceIdFunctionsRule_NonConformingExprPath">
            <summary>
              Looks up a localized string similar to Found nonconforming expression at {0}.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceSymbolReferenceRule_CodeFix">
            <summary>
              Looks up a localized string similar to Use direct resource reference.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceSymbolReferenceRule_Description">
            <summary>
              Looks up a localized string similar to Use a direct resource symbol reference instead of &apos;reference&apos; or &apos;list*&apos; functions..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseResourceSymbolReferenceRule_MessageFormat">
            <summary>
              Looks up a localized string similar to Use a resource reference instead of invoking function &quot;{0}&quot;. This simplifies the syntax and allows Bicep to better understand your deployment dependency graph..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseSafeAccessRule_CodeFix">
            <summary>
              Looks up a localized string similar to Use the safe access (.?) operator.
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseSafeAccessRule_Description">
            <summary>
              Looks up a localized string similar to Use the safe access (.?) operator instead of checking object contents with the &apos;contains&apos; function..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseSafeAccessRule_MessageFormat">
            <summary>
              Looks up a localized string similar to The syntax can be simplified by using the safe access (.?) operator..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseSecureValueForSecureInputsRule_Description">
            <summary>
              Looks up a localized string similar to Resource properties expecting secure input should be assigned secure values..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseSecureValueForSecureInputsRule_MessageFormat">
            <summary>
              Looks up a localized string similar to Property path &quot;{0}&quot; for resources of type &quot;{1}&quot; should be assigned a secure value..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseStableResourceIdentifiersMessage">
            <summary>
              Looks up a localized string similar to Resource identifiers should be reproducible outside of their initial deployment context. .
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseStableResourceIdentifiersMessageFormat">
            <summary>
              Looks up a localized string similar to Resource identifiers should be reproducible outside of their initial deployment context. Resource {0}&apos;s &apos;{1}&apos; identifier is potentially nondeterministic due to its use of the &apos;{2}&apos; function ({3})..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseStableVMImage">
            <summary>
              Looks up a localized string similar to Virtual machines shouldn&apos;t use preview images..
            </summary>
        </member>
        <member name="P:Bicep.Core.CoreResources.UseStableVMImageRuleFixMessageFormat">
            <summary>
              Looks up a localized string similar to Virtual machines shouldn&apos;t use preview images. Use stable version in imageReference property &quot;{0}&quot;..
            </summary>
        </member>
        <member name="M:Bicep.Core.DataFlow.DataFlowAnalyzer.GetScope(Bicep.Core.Semantics.LocalVariableSymbol)">
            <summary>
            Gets the syntax in which the specified symbol starts being accessible.
            </summary>
            <param name="symbol">the local variable symbol</param>
        </member>
        <member name="F:Bicep.Core.Diagnostics.DiagnosticStyling.Default">
            <summary>
            No particular diagnostic styling - this should be the default for most diagnostic failures
            </summary>
        </member>
        <member name="F:Bicep.Core.Diagnostics.DiagnosticStyling.ShowCodeAsUnused">
            <summary>
            Shows the code inside the error dimmed out, i.e. for unused variables and other code
            </summary>
        </member>
        <member name="F:Bicep.Core.Diagnostics.DiagnosticStyling.ShowCodeDeprecated">
            <summary>
            Indicate the code in the error should be shown as deprecated
            </summary>
        </member>
        <member name="M:Bicep.Core.Diagnostics.DiagnosticTree.ContainsEnclosedNode(System.Int32,System.Int32)">
            <summary>
            Check if there is at least one node enclosed by [start, end] in O(lg n),
            where n is the number of diagnostics in the tree.
            </summary>
            <param name="start">The interval start position.</param>
            <param name="end">The interval end position.</param>
        </member>
        <member name="M:Bicep.Core.Diagnostics.DiagnosticTree.FindEnclosedNodesRecursively(Bicep.Core.Collections.Trees.IntervalTreeNode{Bicep.Core.Diagnostics.IDiagnostic},System.Int32,System.Int32)">
            <summary>
            Find nodes enclosed by [start, end] in O(min(n, k * lg n)), where n is the number of diagnostics
            in the tree, and k is the number of nodes enclosed by [start, end].
            </summary>
            <param name="root">The current root node to search.</param>
            <param name="start">The interval start position.</param>
            <param name="end">The interval end position.</param>
        </member>
        <member name="T:Bicep.Core.Diagnostics.ErrorDiagnosticException">
            <summary>
            Exception with error diagnostic information attached.
            </summary>
        </member>
        <member name="T:Bicep.Core.Emit.EmitResult">
            <param name="Status">The status of the emit operation.</param>
            <param name="Diagnostics">The list of diagnostics collected during the emit operation.</param>
            <param name="SourceMap">Source map created during the emit operation.</param>
        </member>
        <member name="M:Bicep.Core.Emit.EmitResult.#ctor(Bicep.Core.Emit.EmitStatus,System.Collections.Immutable.ImmutableArray{Bicep.Core.Diagnostics.IDiagnostic},Bicep.Core.Emit.SourceMap)">
            <param name="Status">The status of the emit operation.</param>
            <param name="Diagnostics">The list of diagnostics collected during the emit operation.</param>
            <param name="SourceMap">Source map created during the emit operation.</param>
        </member>
        <member name="P:Bicep.Core.Emit.EmitResult.Status">
            <summary>The status of the emit operation.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.EmitResult.Diagnostics">
            <summary>The list of diagnostics collected during the emit operation.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.EmitResult.SourceMap">
            <summary>Source map created during the emit operation.</summary>
        </member>
        <member name="F:Bicep.Core.Emit.EmitStatus.Succeeded">
            <summary>
            Emitting the template succeeded. There were no errors. Warnings may have been suppressed. Informational diagnostics may have been emitted. 
            </summary>
        </member>
        <member name="F:Bicep.Core.Emit.EmitStatus.Failed">
            <summary>
            Emitting the template failed due to errors. Warnings and informational diagnostics may have been emitted also.
            </summary>
        </member>
        <member name="P:Bicep.Core.Emit.EmitterSettings.EnableSymbolicNames">
            <summary>
            Generate symbolic names in template output?
            </summary>
        </member>
        <member name="P:Bicep.Core.Emit.EmitterSettings.UseExperimentalTemplateLanguageVersion">
            <summary>
            Use an experimental version of the ARM JSON template syntax. Only used if an experimental Bicep feature has been explicitly enabled.
            </summary>
        </member>
        <member name="M:Bicep.Core.Emit.ExpressionConverter.ConvertExpression(Bicep.Core.Intermediate.Expression)">
            <summary>
            Converts the specified bicep expression tree into an ARM template expression tree.
            The returned tree may be rooted at either a function expression or jtoken expression.
            </summary>
            <param name="expression">The expression</param>
        </member>
        <member name="M:Bicep.Core.Emit.ExpressionConverter.GenerateCurrentManagementGroupId">
            <summary>
            Generates a management group id, using the managementGroup() function. Only suitable for use if the template being generated is targeting the management group scope.
            </summary>
        </member>
        <member name="F:Bicep.Core.Emit.ForSyntaxValidatorVisitor.PropertyLoopCapability.Inconclusive">
            <summary>
            Node is not derived from expression syntax so property loop capability depends on other nodes in the hierarchy.
            </summary>
        </member>
        <member name="F:Bicep.Core.Emit.ForSyntaxValidatorVisitor.PropertyLoopCapability.DisallowedInExpression">
            <summary>
            Property loops are not allowed due to nodes that prevent such usage.
            </summary>
        </member>
        <member name="F:Bicep.Core.Emit.ForSyntaxValidatorVisitor.PropertyLoopCapability.PotentiallyAllowed">
            <summary>
            Property loops may be allowed.
            </summary>
        </member>
        <member name="M:Bicep.Core.Emit.ForSyntaxValidatorVisitor.IsPropertyLoopUsagePossibleInside(Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            We cannot compile for-expressions when they are inside function calls or operators. This function
            checks if the specified node allows for-expression usage.
            </summary>
            <param name="syntax">The node to check</param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Emit.InlineDependencyVisitor.GetVariablesToInline(Bicep.Core.Semantics.SemanticModel)">
            <summary>
            Gets a set of variables that must be inlined due to runtime limitations.
            </summary>
            <param name="model">The semantic model</param>
        </member>
        <member name="M:Bicep.Core.Emit.InlineDependencyVisitor.ShouldInlineVariable(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Syntax.VariableDeclarationSyntax,System.Collections.Immutable.ImmutableArray{System.String}@)">
            <summary>
            Checks if the specified variable needs to be inlined due to runtime limitations. In cases where the inlining is caused by accessing a variable that must be inlined,
            the variable access chain is returned. Otherwise, an empty chain is returned.
            </summary>
            <param name="model">The semantic model</param>
            <param name="variable">The variable to check</param>
            <param name="variableAccessChain">The variable access chain that leads to inlining or empty if not available.</param>
        </member>
        <member name="P:Bicep.Core.Emit.ParametersEmitter.UTF8EncodingWithoutBom">
            <summary>
            The JSON spec requires UTF8 without a BOM, so we use this encoding to write JSON files.
            </summary>
        </member>
        <member name="M:Bicep.Core.Emit.ResourceDependencyVisitor.GetResourceDependencies(Bicep.Core.Semantics.SemanticModel,System.Nullable{Bicep.Core.Emit.ResourceDependencyVisitor.Options})">
            <summary>
            Determines resource dependencies between all resources, returning it as a map of resource -> dependencies.
            Consider usage in expressions, parent/child relationships and (by default) dependsOn entries
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bicep.Core.Emit.ScopeHelper.ScopeData">
            <param name="RequestedScope">Type of scope requested by the resource.</param>
            <param name="ManagementGroupNameProperty">Expression for the name of the Management Group or null.</param>
            <param name="SubscriptionIdProperty">Expression for the subscription ID or null.</param>
            <param name="ResourceGroupProperty">Expression for the resource group name or null.</param>
            <param name="ResourceScope">The symbol of the resource being extended or null.</param>
            <param name="ResourceScopeNameSyntaxSegments">The name segments of the scoping resource. These may differ from the name segments of <see cref="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceScope" /> if any loop-local variables have been replaced.</param>
            <param name="IndexExpression">The expression for the loop index. This is used with loops when indexing into resource collections.</param>
        </member>
        <member name="M:Bicep.Core.Emit.ScopeHelper.ScopeData.#ctor(Bicep.Core.TypeSystem.ResourceScope,Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Semantics.Metadata.DeclaredResourceMetadata,System.Nullable{System.Collections.Immutable.ImmutableArray{Bicep.Core.Syntax.SyntaxBase}},Bicep.Core.Syntax.SyntaxBase)">
            <param name="RequestedScope">Type of scope requested by the resource.</param>
            <param name="ManagementGroupNameProperty">Expression for the name of the Management Group or null.</param>
            <param name="SubscriptionIdProperty">Expression for the subscription ID or null.</param>
            <param name="ResourceGroupProperty">Expression for the resource group name or null.</param>
            <param name="ResourceScope">The symbol of the resource being extended or null.</param>
            <param name="ResourceScopeNameSyntaxSegments">The name segments of the scoping resource. These may differ from the name segments of <see cref="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceScope" /> if any loop-local variables have been replaced.</param>
            <param name="IndexExpression">The expression for the loop index. This is used with loops when indexing into resource collections.</param>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.RequestedScope">
            <summary>Type of scope requested by the resource.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ManagementGroupNameProperty">
            <summary>Expression for the name of the Management Group or null.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.SubscriptionIdProperty">
            <summary>Expression for the subscription ID or null.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceGroupProperty">
            <summary>Expression for the resource group name or null.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceScope">
            <summary>The symbol of the resource being extended or null.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceScopeNameSyntaxSegments">
            <summary>The name segments of the scoping resource. These may differ from the name segments of <see cref="P:Bicep.Core.Emit.ScopeHelper.ScopeData.ResourceScope" /> if any loop-local variables have been replaced.</summary>
        </member>
        <member name="P:Bicep.Core.Emit.ScopeHelper.ScopeData.IndexExpression">
            <summary>The expression for the loop index. This is used with loops when indexing into resource collections.</summary>
        </member>
        <member name="M:Bicep.Core.Emit.SourceAwareJsonTextWriter.#ctor(System.IO.TextWriter,Bicep.Core.Workspaces.BicepSourceFile)">
            <summary>
            Creates a JsonTextWriter that is capable of generating a source map for the compiled JSON
            </summary>
            <param name="textWriter"></param>
            <param name="sourceFileToTrack">If set to default, source mapping is disabled</param>
        </member>
        <member name="P:Bicep.Core.Emit.TemplateEmitter.UTF8EncodingWithoutBom">
            <summary>
            The JSON spec requires UTF8 without a BOM, so we use this encoding to write JSON files.
            </summary>
        </member>
        <member name="M:Bicep.Core.Emit.TemplateEmitter.EmitTemplateGeneratedParameterFile(System.IO.Stream,System.String,Bicep.Core.Emit.Options.OutputFormatOption,Bicep.Core.Emit.Options.IncludeParamsOption)">
            <summary>
            Emits a template to the specified stream if there are no errors. No writes are made to the stream if there are compilation errors.
            </summary>
            <param name="stream">The stream to write the template</param>
            <param name="existingContent">Existing content of the parameters file</param>
            <param name="outputFormat">Output file format (json or bicepparam)</param>
            <param name="includeParams">Include parameters (requiredonly or all)</param>
        </member>
        <member name="M:Bicep.Core.Emit.TemplateEmitter.EmitTemplateGeneratedParameterFile(System.IO.TextWriter,System.String,Bicep.Core.Emit.Options.OutputFormatOption,Bicep.Core.Emit.Options.IncludeParamsOption)">
            <summary>
            Emits a template to the specified json writer if there are no errors. No writes are made to the writer if there are compilation errors.
            </summary>
            <param name="textWriter">The text writer to write the template</param>
            <param name="existingContent">Existing content of the parameters file</param>
            <param name="outputFormat">Output file format (json or bicepparam)</param>
            <param name="includeParams">Include parameters (requiredonly or all)</param>
        </member>
        <member name="M:Bicep.Core.Emit.TemplateEmitter.Emit(System.IO.Stream)">
            <summary>
            Emits a template to the specified stream if there are no errors. No writes are made to the stream if there are compilation errors.
            </summary>
            <param name="stream">The stream to write the template</param>
        </member>
        <member name="M:Bicep.Core.Emit.TemplateEmitter.Emit(System.IO.TextWriter)">
            <summary>
            Emits a template to the specified text writer if there are no errors. No writes are made to the writer if there are compilation errors.
            </summary>
            <param name="textWriter">The text writer to write the template</param>
        </member>
        <member name="T:Bicep.Core.Exceptions.BicepException">
            <summary>
            Exception used to signal common error conditions.
            </summary>
        </member>
        <member name="M:Bicep.Core.Extensions.StringExtensions.Rfc6901Decode(System.String)">
            <summary>
            Applies JSON Pointer segment replacements and url-decodes the input string per <see href="https://www.rfc-editor.org/rfc/rfc6901#section-6">RFC 6901, section 6</see>.
            </summary>
            <param name="toDecode">The unmodified path segment string</param>
            <returns>The decoded path segment</returns>
        </member>
        <member name="M:Bicep.Core.Extensions.StringExtensions.Rfc6901Encode(System.String)">
            <summary>
            Applies JSON Pointer segment replacements and url-encodes the input string per <see href="https://www.rfc-editor.org/rfc/rfc6901#section-6">RFC 6901, section 6</see>.
            </summary>
            <param name="toEncode">The unmodified path segment string</param>
            <returns>The encoded path segment</returns>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.TryAcquireFileLock(System.Uri)">
            <summary>
            Attempts to acquire a cross-process lock via a zero-length lock file. The lock file should not be used to store any content. Returns null if lock was not taken.
            </summary>
            <param name="fileUri">The URI of the lock file</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.TryRead(System.Uri)">
            <summary>
            Tries to read a file contents to string. If an exception is encountered, returns null and sets a non-null failureMessage.
            </summary>
            <param name="fileUri">The file URI to read.</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.TryReadAtMostNCharacters(System.Uri,System.Text.Encoding,System.Int32)">
            <summary>
            Reads a file contents up to a certain number of characters.
            </summary>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.TryReadAsBinaryData(System.Uri,System.Nullable{System.Int32})">
            <summary>
            Tries to read a file as binary data.
            </summary>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.TryResolveFilePath(System.Uri,System.String)">
            <summary>
            Tries to resolve a child file path relative to a parent module file path.
            </summary>
            <param name="parentFileUri">The file URI of the parent.</param>
            <param name="childFilePath">The file path of the child.</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.GetDirectories(System.Uri,System.String)">
            <summary>
            Tries to get Directories given a uri and pattern. Both argument and returned URIs MUST have a trailing '/'
            </summary>
            <param name="fileUri">The base fileUri</param>
            <param name="pattern">optional pattern to filter the dirs</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.GetFiles(System.Uri,System.String)">
            <summary>
            Tries to get Files given a uri and pattern. fileUri MUST have a trailing '/'
            </summary>
            <param name="fileUri">The base fileUri</param>
            <param name="pattern">optional pattern to filter the resulting files</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.DirExists(System.Uri)">
            <summary>
            Check whether specified URI's directory exists if specified URI is a file:// URI. fileUri MUST have a trailing '/'
            </summary>
            <param name="fileUri">The fileUri to test</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.IFileResolver.FileExists(System.Uri)">
            <summary>
            Checks if the specified file URI exists.
            </summary>
            <param name="uri">The URI to test.</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.PathHelper.ResolvePath(System.String,System.String,System.IO.Abstractions.IFileSystem)">
            <summary>
            Converts relative paths to absolute paths relative to current directory. Fully qualified paths are returned as-is.
            </summary>
            <param name="path">The path.</param>
            <param name="baseDirectory">The base directory to use when resolving relative paths. Set to null to use CWD.</param>
            <param name="fileSystem">The file system abstraction.</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.PathHelper.ResolveAndNormalizePath(System.String,System.String)">
            <summary>
            Returns a normalized absolute path. Relative paths are converted to absolute paths relative to current directory prior to normalization.
            </summary>
            <param name="path">The path.</param>
            <param name="baseDirectory">The base directory to use when resolving relative paths. Set to null to use CWD.</param>
        </member>
        <member name="M:Bicep.Core.FileSystem.PathHelper.CheckIfFileSystemIsCaseSensitive">
            <summary>
            Returns true if the current file system is case sensitive (most Linux and MacOS X file systems). Returns false if the file system is case insensitive (Windows file systems.)
            </summary>
        </member>
        <member name="F:Bicep.Core.Intermediate.AccessExpressionFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Bicep.Core.Intermediate.AccessExpressionFlags.SafeAccess">
            <summary>
            The access used a safe dereference operator (<code>.?</code> or <code>[?]</code>).
            </summary>
        </member>
        <member name="T:Bicep.Core.Intermediate.SynthesizedVariableReferenceExpression">
            <summary>
              Represents a variable which has been synthesized rather than explicitly declared by the user.
              This is used for example when in-lining JSON blocks for the loadJsonContent() function.
            </summary>
        </member>
        <member name="M:Bicep.Core.Intermediate.SynthesizedVariableReferenceExpression.#ctor(Bicep.Core.Syntax.SyntaxBase,System.String)">
            <summary>
              Represents a variable which has been synthesized rather than explicitly declared by the user.
              This is used for example when in-lining JSON blocks for the loadJsonContent() function.
            </summary>
        </member>
        <member name="M:Bicep.Core.Intermediate.ExpressionBuilder.GetResourceNameSyntaxSegments(Bicep.Core.Semantics.Metadata.DeclaredResourceMetadata)">
            <summary>
            Returns a collection of name segment expressions for the specified resource. Local variable replacements
            are performed so the expressions are valid in the language/binding scope of the specified resource.
            </summary>
            <param name="resource">The resource</param>
        </member>
        <member name="M:Bicep.Core.Intermediate.ExpressionBuilder.GetResourceNameAncestorSyntaxSegment(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Semantics.Metadata.DeclaredResourceMetadata,System.Int32)">
            <summary>
            Calculates the expression that represents the parent name corresponding to the specified ancestor of the specified resource.
            The expressions returned are modified by performing the necessary local variable replacements.
            </summary>
            <param name="model">The model in which the resource is declared.</param>
            <param name="resource">The declared resource metadata</param>
            <param name="startingAncestorIndex">the index of the ancestor (0 means the ancestor closest to the root)</param>
        </member>
        <member name="F:Bicep.Core.LanguageConstants.MaxResourceCopyIndexValue">
            <summary>
            This is the maximum value that the copyIndex() function may return at run time for a resource copy loop.
            </summary>
        </member>
        <member name="F:Bicep.Core.LanguageConstants.MaxDeploymentNameLength">
            <summary>
            Maximum length of a deployment (aka module) name.
            </summary>
        </member>
        <member name="T:Bicep.Core.Modules.LocalModuleReference">
            <summary>
            Represents a reference to a local module (by relative path).
            </summary>
        </member>
        <member name="P:Bicep.Core.Modules.LocalModuleReference.Path">
            <summary>
            Gets the relative path to the module.
            </summary>
        </member>
        <member name="T:Bicep.Core.Navigation.IArtifactReferenceSyntax">
            <summary>
            Objects that implement IArtifactReferenceSyntax, contain syntax that can reference a foreign artifact, the artifact address
            is returned by `TryGetPath` and `SourceSyntax` contains the source syntax object to use for error propagation.
            </summary>
        </member>
        <member name="T:Bicep.Core.Navigation.ISymbolReference">
            <summary>
            Represents a syntax node that references a symbol.
            </summary>
        </member>
        <member name="T:Bicep.Core.Navigation.ITopLevelDeclarationSyntax">
            <summary>
            Represents a top-level syntax declaration.
            </summary>
            <remarks>This is used to identify a program syntax declaration.</remarks>
        </member>
        <member name="T:Bicep.Core.Navigation.ITopLevelNamedDeclarationSyntax">
            <summary>
            Represents a named syntax declaration.
            </summary>
            <remarks>This is used to distinguish a declaration from syntax that references the declaration.</remarks>
        </member>
        <member name="M:Bicep.Core.Parsing.BaseParser.FunctionCallAccess(Bicep.Core.Syntax.IdentifierSyntax,Bicep.Core.Parsing.ExpressionFlags)">
            <summary>
            Method that gets a function call identifier, its arguments plus open and close parens
            </summary>
        </member>
        <member name="M:Bicep.Core.Parsing.Lexer.TryGetRawStringSegments(System.Collections.Generic.IReadOnlyList{Bicep.Core.Parsing.Token})">
            <summary>
            Converts a set of string literal tokens into their raw values. Returns null if any of the tokens are of the wrong type or malformed.
            </summary>
            <param name="stringTokens">the string tokens</param>
        </member>
        <member name="M:Bicep.Core.Parsing.Lexer.TryGetStringValue(Bicep.Core.Parsing.Token)">
            <summary>
            Converts string literal text into its value. Returns null if the specified string token is malformed due to lexer error recovery.
            </summary>
            <param name="stringToken">the string token</param>
        </member>
        <member name="M:Bicep.Core.Parsing.Lexer.IsValidIdentifier(System.String)">
            <summary>
            Determines if the specified string is a valid identifier. To be considered a valid identifier, the string must start
            with the identifier start character and remaining characters must be identifier continuation characters.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:Bicep.Core.Parsing.ParseDiagnosticsVisitor">
            <summary>
            Visitor responsible for collecting all the parse diagnostics from the parse tree.
            </summary>
        </member>
        <member name="T:Bicep.Core.Parsing.RecoveryFlags">
            <summary>
            Flags that control the parser recovery behavior.
            </summary>
        </member>
        <member name="F:Bicep.Core.Parsing.RecoveryFlags.None">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:Bicep.Core.Parsing.RecoveryFlags.ConsumeTerminator">
            <summary>
            The terminator token will be consumed by the recovery logic.
            </summary>
        </member>
        <member name="F:Bicep.Core.Parsing.RecoveryFlags.SuppressDiagnostics">
            <summary>
            The diagnostics captured as part of the recovery will be suppressed.
            </summary>
        </member>
        <member name="M:Bicep.Core.Parsing.SlidingTextWindow.GetSpan">
            <summary>
            Gets the span of the current window.
            </summary>
        </member>
        <member name="M:Bicep.Core.Parsing.SlidingTextWindow.GetLookbehindSpan(System.Int32)">
            <summary>
            Gets the span from n characters behind up to current position.
            </summary>
            <param name="charCount">Number of characters to look behind. Must be zero or positive.</param>
        </member>
        <member name="M:Bicep.Core.Parsing.SlidingTextWindow.GetAbsolutePosition">
            <summary>
            Returns the current absolute position within the text.
            </summary>
        </member>
        <member name="M:Bicep.Core.Parsing.StringUtils.NewLineRegex">
            <remarks>
            Pattern:<br/>
            <code>(\\r\\n|\\r|\\n)</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match the string "\r\n".<br/>
                    ○ Match a character in the set [\n\r].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.Between(Bicep.Core.Parsing.TextSpan,Bicep.Core.Parsing.TextSpan)">
            <summary>
            Calculates the span from the beginning of the first span to the end of the second span.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
            <returns>the span from the beginning of the first span to the end of the second span</returns>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.SafeBetween(System.Collections.Generic.IReadOnlyList{Bicep.Core.Parsing.IPositionable},System.Int32)">
            <summary>
            Calculates the span for a sequence of positionables, returning a 0-length span at a fallback position if the sequence is empty.
            </summary>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.Between(Bicep.Core.Parsing.IPositionable,Bicep.Core.Parsing.IPositionable)">
            <summary>
            Calculates the span from the beginning of the first object to the end of the 2nd one.
            </summary>
            <param name="a">The first object</param>
            <param name="b">The second object</param>
            <returns>the span from the beginning of the first object to the end of the 2nd one</returns>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.BetweenExclusive(Bicep.Core.Parsing.TextSpan,Bicep.Core.Parsing.TextSpan)">
            <summary>
            Calculates the span from the end of the first span to the beginning of the second span.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
            <returns>the span from the end of the first span to the beginning of the second span</returns>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.BetweenExclusive(Bicep.Core.Parsing.IPositionable,Bicep.Core.Parsing.IPositionable)">
            <summary>
            Calculates the span from the end of the first object to the beginning of the second one.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
            <returns>the span from the end of the first object to the beginning of the second one</returns>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.AreOverlapping(Bicep.Core.Parsing.IPositionable,Bicep.Core.Parsing.IPositionable)">
            <summary>
            Checks if the two spans are overlapping.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.AreOverlapping(Bicep.Core.Parsing.TextSpan,Bicep.Core.Parsing.TextSpan)">
            <summary>
            Checks if the two spans are overlapping.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.AreNeighbors(Bicep.Core.Parsing.IPositionable,Bicep.Core.Parsing.IPositionable)">
            <summary>
            Checks if span of b begins where span of a ends.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.AreNeighbors(Bicep.Core.Parsing.TextSpan,Bicep.Core.Parsing.TextSpan)">
            <summary>
            Checks if span b begins where span a ends.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.IsPairInOrder(Bicep.Core.Parsing.TextSpan,Bicep.Core.Parsing.TextSpan)">
            <summary>
            Checks if a comes before b.
            </summary>
            <param name="a">The first span</param>
            <param name="b">The second span</param>
        </member>
        <member name="M:Bicep.Core.Parsing.TextSpan.LastNonNull(Bicep.Core.Parsing.IPositionable,Bicep.Core.Parsing.IPositionable[])">
            <summary>
            Returns the last non-null <see cref="T:Bicep.Core.Parsing.IPositionable"/> in a sequence.
            </summary>
            <param name="first">The first non-null positionable</param>
            <param name="after">The sequence of nullable positionables</param>
        </member>
        <member name="T:Bicep.Core.PrettyPrintV2.Documents.Document">
            <summary>
            A document represents a set of layouts.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.Space">
            <summary>
            Prints a whitespace.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.HardLine">
            <summary>
            Prints a newline that is always included in the output and doesn't indent the next line.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.SoftLine">
            <summary>
            A newline placeholder that may or may not be printed.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.LineOrEmpty">
            <summary>
            Prints a newline and indent the next line. If the enclosing group fits on one line, the newline will be replaced with an empty string.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.LineOrSpace">
            <summary>
            Prints a newline and indent the next line. If the enclosing group fits on one line, the newline will be replaced with a whitespace.
            </summary>
        </member>
        <member name="F:Bicep.Core.PrettyPrintV2.Documents.DocumentOperators.LineOrCommaSpace">
            <summary>
            Prints a newline and indent the next line. If the enclosing group fits on one line, the newline will be replaced with a comma followed by a whitespace.
            </summary>
        </member>
        <member name="M:Bicep.Core.PrettyPrintV2.PrettyPrinterV2.PrintValid(Bicep.Core.Syntax.SyntaxBase,Bicep.Core.PrettyPrintV2.PrettyPrinterV2Options)">
            <summary>
            Outputs a formatted string representation of a syntactically correct syntax node.
            </summary>
            <remarks>
            This method is intended for formatting manually created syntax nodes that are confirmed to be free of lexing and parsing errors. 
            Supplying a syntax node that contains errors could result in improperly formatted output.
            </remarks>
            <param name="validSyntaxToPrint">The syntax node to format, which must be free of syntax errors.</param>
            <param name="options">The formatting options.</param>
            <returns>A string that represents the formatted syntax node.</returns>
        </member>
        <member name="M:Bicep.Core.PrettyPrintV2.SyntaxLayouts.ForceBreak">
            <summary>
            Breaks the enclosing parent groups.
            </summary>
        </member>
        <member name="T:Bicep.Core.Registry.ArtifactReference">
            <summary>
            Strongly typed representation of a artifact reference string.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.ArtifactReference.ParentModuleUri">
            <summary>
            The URI of the template in which this artifact reference appears.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.ArtifactReference.FullyQualifiedReference">
            <summary>
            Gets the fully qualified artifact reference, which includes the scheme.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.ArtifactReference.UnqualifiedReference">
            <summary>
            Gets the unqualified artifact reference, which does not include the scheme.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.ArtifactReference.IsExternal">
            <summary>
            Gets a value indicating whether this reference points to an external artifact.
            </summary>
        </member>
        <member name="T:Bicep.Core.Registry.ArtifactRestoreStatus">
            <summary>
            Represents the restore status of a module
            </summary>
        </member>
        <member name="F:Bicep.Core.Registry.ArtifactRestoreStatus.Unknown">
            <summary>
            We have not yet attempted to restore the module.
            </summary>
        </member>
        <member name="F:Bicep.Core.Registry.ArtifactRestoreStatus.Failed">
            <summary>
            The module restore has failed.
            </summary>
        </member>
        <member name="F:Bicep.Core.Registry.ArtifactRestoreStatus.Succeeded">
            <summary>
            Module restore has succeeded.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.DefaultArtifactRegistryProvider.Registries(System.Uri)">
            <summary>
            Gets the registries available for module references inside a given template URI.
            </summary>
            <param name="templateUri">URI of the Bicep template source code which contains the module references.
            This is needed to determine the appropriate bicepconfig.json (which contains module alias definitions) and features provider to bind to</param>
            <returns></returns>
        </member>
        <member name="T:Bicep.Core.Registry.IArtifactRegistry">
            <summary>
            An implementation of a Bicep artifact registry.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.IArtifactRegistry.Scheme">
            <summary>
            Gets the scheme used by this registry in artifact references.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.GetCapabilities(Bicep.Core.Registry.ArtifactType,Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Gets the capabilities of this registry for the specified artifact reference.
            </summary>
            <param name="reference">The module reference</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.TryParseArtifactReference(Bicep.Core.Registry.ArtifactType,System.String,System.String)">
            <summary>
            Attempts to parse the specified unqualified reference or returns a failure builder.
            </summary>
            <param name="aliasName">The alias name</param>
            <param name="reference">The unqualified artifact reference</param>
            <param name="artifactType">The artifact type. Either "module" or "provider"</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.IsArtifactRestoreRequired(Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns true if the specified artifact is already cached in the local cache.
            </summary>
            <param name="reference">The reference to the artifact.</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.TryGetLocalArtifactEntryPointUri(Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns a URI to the entry point module.
            </summary>
            <param name="reference">The module reference</param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.CheckArtifactExists(Bicep.Core.Registry.ArtifactType,Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns true if the specified module exists in the registry.
            </summary>
            <param name="reference">The reference to the module.</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.RestoreArtifacts(System.Collections.Generic.IEnumerable{Bicep.Core.Registry.ArtifactReference})">
            <summary>
            Downloads the specified modules from the registry and caches them locally.
            Returns a mapping of module references to error builders for modules that failed to be downloaded.
            </summary>
            <param name="references">module references</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.OnRestoreArtifacts(System.Boolean)">
            <summary>
            Called when time to restore artifacts, even if all artifacts are already restored.  Allows the registry provider
            an opportunity to deal with registry tasks that are not specific to a specific artifact or version.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.InvalidateArtifactsCache(System.Collections.Generic.IEnumerable{Bicep.Core.Registry.ArtifactReference})">
            <summary>
            Invalidate the specified cached modules from the registry.
            Returns a mapping of module references to error builders for modules that failed to be invalidated.
            </summary>
            <param name="references">module references</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.PublishModule(Bicep.Core.Registry.ArtifactReference,System.BinaryData,System.BinaryData,System.String,System.String)">
            <summary>
            Publishes the module at the specified path to the registry.
            </summary>
            <param name="reference">The module reference</param>
            <param name="compiled">The compiled module</param>
            <param name="bicepSources">The source archive</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.PublishProvider(Bicep.Core.Registry.ArtifactReference,Bicep.Core.Registry.ProviderPackage)">
            <summary>
            Publishes a provider types package to the registry.
            </summary>
            <param name="reference">The provider reference</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.GetDocumentationUri(Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns documentationUri for the module.
            </summary>
            <param name="reference">The module reference</param>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.TryGetModuleDescription(Bicep.Core.Semantics.ModuleSymbol,Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns description for a module.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.IArtifactRegistry.TryGetSource(Bicep.Core.Registry.ArtifactReference)">
            <summary>
            Returns the source code for the module, if available.
            </summary>
            <param name="reference">The module reference</param>
            <returns>A source archive</returns>
        </member>
        <member name="T:Bicep.Core.Registry.IArtifactRegistryProvider">
            <summary>
            Represents the configured artifact registries for the current instance of Bicep.
            </summary>
        </member>
        <member name="T:Bicep.Core.Registry.IContainerRegistryClientFactory">
            <summary>
            Creates ACR clients.
            </summary>
            <remarks>This exists because we need to inject mock clients in integration tests and because the real client constructor requires parameters.</remarks>
        </member>
        <member name="M:Bicep.Core.Registry.OciArtifactRegistry.GetPublicBicepModuleDocumentationUri(System.String,System.String)">
            <summary>
            Automatically generate a help URI for public MCR modules
            </summary>
            <param name="publicModuleName">e.g. app/dapr-containerapp</param>
            <param name="tag">e.g. 1.0.1</param>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.ArtifactAddressComponents.Registry">
            <summary>
            Gets the registry URI.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.ArtifactAddressComponents.Repository">
            <summary>
            Gets the repository name. The repository name is the path to an artifact in the registry without the tag.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.ArtifactAddressComponents.Tag">
            <summary>
            Gets the tag. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.ArtifactAddressComponents.Digest">
            <summary>
            Gets the digest. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.ArtifactAddressComponents.ArtifactId">
            <summary>
            Gets the artifact ID.
            </summary>
        </member>
        <member name="T:Bicep.Core.Registry.Oci.IArtifactAddressComponents">
            <summary>
            Represents a module/provider reference without the scheme ("br:") and without any aliases
            </summary>
            <example>test.azurecr.io/foo/bar:latest</example>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IArtifactAddressComponents.Registry">
            <summary>
            Gets the registry URI.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IArtifactAddressComponents.Repository">
            <summary>
            Gets the repository name. The repository name is the path to an artifact in the registry without the tag.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IArtifactAddressComponents.Tag">
            <summary>
            Gets the tag. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IArtifactAddressComponents.Digest">
            <summary>
            Gets the digest. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IArtifactAddressComponents.ArtifactId">
            <summary>
            Gets the full artifact ID (does not include the "br:" or "ts:" scheme)
            </summary>
            <example>test.azurecr.io/foo/bar:latest</example>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.IOciArtifactReference.FullyQualifiedReference">
            <summary>
            Gets the fully qualified artifact reference, which includes the scheme.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.Type">
            <summary>
            Gets the type of artifact reference. Either module or provider.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.Registry">
            <summary>
            Gets the registry URI.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.Repository">
            <summary>
            Gets the repository name. The repository name is the path to an artifact in the registry without the tag.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.Tag">
            <summary>
            Gets the tag. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.Digest">
            <summary>
            Gets the digest. Either tag or digest is set but not both.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciArtifactReference.ArtifactId">
            <summary>
            Gets the artifact ID.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciArtifactReferenceFacts.OciNamespaceSegmentRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-z0-9]+([._-][a-z0-9]+)*$</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9a-z] greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ Match a character in the set [-._].<br/>
                ○ Match a character in the set [0-9a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciArtifactReferenceFacts.DigestRegex">
            <remarks>
            Pattern:<br/>
            <code>^sha256:[a-f0-9]{64}$</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "sha256:".<br/>
            ○ Match a character in the set [0-9a-f] exactly 64 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciArtifactReferenceFacts.TagNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}$</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z].<br/>
            ○ Match a character in the set [-.0-9A-Z_a-z] atomically at most 127 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.OciDescriptor">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.OciManifest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.ImmutableArrayOciDescriptor">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.ImmutableDictionaryStringString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifestSerializationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciManifestSerializationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciManifestSerializationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciManifestSerializationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciManifest.Annotations">
            <summary>
            Additional information provided through arbitrary metadata.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.OciProvidersV1Config">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.ImmutableArrayString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.NullableImmutableArrayString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.OciProvidersV1ConfigSerializationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Bicep.Core.Registry.Oci.TagEncoder">
            <summary>
            Encodes the casing of an OCI tag into a file name that can be used with case-insensitive file systems.
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.Oci.TagEncoder.Encode(System.String)">
            <summary>
            Encodes the specified OCI tag into a file name that can be used with case-insensitive file systems.
            </summary>
            <param name="tag">The tag value. The tag should be validated to match the OCI spec before calling this function.</param>
        </member>
        <member name="T:Bicep.Core.Registry.PublicRegistry.PublicRegistryModuleMetadataClient">
            <summary>
            Typed http client to get modules metadata that we store at a public endpoint (currently https://github.com/Azure/bicep-registry-modules)
            </summary>
        </member>
        <member name="M:Bicep.Core.Registry.PublicRegistry.PublicRegistryModuleMetadataClient.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Typed http client to get modules metadata that we store at a public endpoint (currently https://github.com/Azure/bicep-registry-modules)
            </summary>
        </member>
        <member name="T:Bicep.Core.Registry.PublicRegistry.PublicRegistryModuleMetadataProvider">
            <summary>
            Provider to get modules metadata that we store at a public endpoint.
            </summary>
        </member>
        <member name="F:Bicep.Core.Registry.RegistryCapabilities.Default">
            <summary>
            Modules can be restored from the registry. All registries must support this capability.
            </summary>
        </member>
        <member name="F:Bicep.Core.Registry.RegistryCapabilities.Publish">
            <summary>
            Modules can be published to the registry.
            </summary>
        </member>
        <member name="M:Bicep.Core.Resources.ResourceTypeReference.ResourceTypePrefixPattern">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;types&gt;[a-z0-9][a-z0-9-.]*(/[a-z0-9][a-z0-9-.]*)*)@</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "types" capture group.<br/>
                ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                ○ Match a character in the set [-.0-9A-Za-z\u212A] greedily any number of times.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ Match '/'.<br/>
                    ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                    ○ Match a character in the set [-.0-9A-Za-z\u212A] atomically any number of times.<br/>
            ○ Match '@'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Resources.ResourceTypeReference.ResourceTypePattern">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;types&gt;[a-z0-9][a-z0-9-.]*(/[a-z0-9][a-z0-9-.]*)*)(@(?&lt;version&gt;[a-z0-9][a-z0-9-\\.]+))?$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "types" capture group.<br/>
                ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                ○ Match a character in the set [-.0-9A-Za-z\u212A] greedily any number of times.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ Match '/'.<br/>
                    ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                    ○ Match a character in the set [-.0-9A-Za-z\u212A] greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match '@'.<br/>
                ○ "version" capture group.<br/>
                    ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                    ○ Match a character in the set [-.0-9A-Za-z\u212A] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Semantics.ArmTemplateSemanticModel.GetMostSpecificDescription(Azure.Deployments.Core.Definitions.Schema.ITemplateSchemaNode)">
            <summary>
            Metadata may be attached to $ref nodes, and the appropriate description for a given parameter or property will be the first one (if any) encountered while following $ref pointers to a concrete type.
            </summary>
            <param name="schemaNode">The starting point for the search</param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Semantics.ArmTemplateSemanticModel.IsExported(Azure.Deployments.Core.Definitions.Schema.TemplateTypeDefinition)">
            <summary>
            Determines if the provided type definition should be allowlisted for use in <c>import</c> statements
            </summary>
            <remarks>
            This method does not use <see cref="M:Bicep.Core.Semantics.ArmTemplateSemanticModel.GetMetadata(Azure.Deployments.Core.Definitions.Schema.ITemplateSchemaNode)"/> because <see cref="M:Bicep.Core.Semantics.ArmTemplateSemanticModel.GetMetadata(Azure.Deployments.Core.Definitions.Schema.ITemplateSchemaNode)"/> merges metadata across $refs.
            We only want to look at the metadata explicitly applied to this type.
            E.g., in the following, `public` should match the predicate and `private` should not:
            <code>
              {
                 "public": {"type": "string", "metadata": {"__bicep_export!": true}},
                 "private": {"$ref": "#/definitions/public"}
              }
            </code>
            The above would be compiled from the following Bicep:
            <code>
              @export()
              type public = string
              type private = public
            </code>
            </remarks>
        </member>
        <member name="M:Bicep.Core.Semantics.AuxiliaryFileCache.Read(System.Uri)">
            <summary>
            Reads a given file from the file system, utilizing the cache where possible.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.Binder.GetSymbolInfo(Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Returns the symbol that was bound to the specified syntax node. Will return null for syntax nodes that never get bound to symbols. Otherwise,
            a symbol will always be returned. Binding failures are represented with a non-null error symbol.
            </summary>
            <param name="syntax">the syntax node</param>
        </member>
        <member name="T:Bicep.Core.Semantics.DeclarationVisitor.ScopeInfo">
            <summary>
            Allows us to mutate child scopes without having to swap out items on the stack
            which is fragile.
            </summary>
            <remarks>This could be replaced with a record if we could target .net 5</remarks>
        </member>
        <member name="P:Bicep.Core.Semantics.DeclaredSymbol.DeclaringSyntax">
            <summary>
            Gets the syntax node that declared this symbol.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.DeclaredSymbol.Type">
            <summary>
            Gets the type of the symbol.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromDecorator(Bicep.Core.Semantics.SemanticModel,Bicep.Core.Syntax.DecorableSyntax)">
            <summary>
            Retrieves description for a given syntax from a @description decorator
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromDecorator(Bicep.Core.Semantics.IBinder,Bicep.Core.Semantics.ITypeManager,Bicep.Core.Syntax.DecorableSyntax)">
            <summary>
            Retrieves description for a given syntax from a @description decorator
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromSemanticModel(Bicep.Core.Semantics.ISemanticModel)">
            <summary>
            Retrieves description for a given module repesented by a semantic model (bicep or json ARM)
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromOciManifestAnnotations(System.Collections.Immutable.ImmutableDictionary{System.String,System.String})">
            <summary>
            Retrieves description for a given module's OCI manifest
            </summary>
            <param name="ociAnnotations">The top-level "annotations" section of the manifest</param>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromArmTemplate(System.IO.Stream)">
            <summary>
            Retrieves description for a given module repesented by a JSON ARM template
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.DescriptionHelper.TryGetFromTemplateSpec(System.IO.Stream)">
            <summary>
            Retrieves description for a given module repesented by a template spec's contents
            </summary>
        </member>
        <member name="T:Bicep.Core.Semantics.ErrorSymbol">
            <summary>
            Represents a name binding failure.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.FileSymbol.Declarations">
            <summary>
            Returns all the top-level declaration symbols.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.FileSymbol.TryGetBicepFileSemanticModelViaUsing">
            <summary>
            Tries to get the semantic module of the Bicep File referenced via a using declaration from the current file.
            If current file is not a parameter file, the method will return false.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.JsonObjectParser.ExtractTokenFromObject(System.String)">
            <summary>
            TryFromJson returns null if the fileContent is not a valid JSON object
            </summary>
        </member>
        <member name="T:Bicep.Core.Semantics.LocalScope">
            <summary>
            Represents a language scope that declares local symbols. (For example the item or index variables in loops are local symbols.)
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.LocalScope.DeclaringSyntax">
            <summary>
            The syntax node that declares the scope, but may not have effect on name binding. Most commonly this will be a ForSyntax object.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.LocalScope.BindingSyntax">
            <summary>
            The syntax node within which this scope will affect binding. This will typically be the Body of a ForSyntax node.
            </summary>
            <remarks>Identifiers within this node will first bind to symbols in this scope. Identifiers above this node will bind to the parent scope.</remarks>
        </member>
        <member name="M:Bicep.Core.Semantics.Namespaces.NamespaceResolver.ResolveUnqualifiedTypeSymbol(Bicep.Core.Syntax.IdentifierSyntax)">
            <summary>
            Attempt to find ambient type in all imported namespaces. As Namespaces are themselves ObjectTypes, their properties can only be types, not values.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.ParameterAssignmentSymbol.DeclaringParameterAssignment">
            <summary>
            Gets the syntax node that declared this symbol.
            </summary>
        </member>
        <member name="F:Bicep.Core.Semantics.ScopeResolution.InheritAll">
            <summary>
              Inherit all scoped symbols from the parent scope.
            </summary>
        </member>
        <member name="F:Bicep.Core.Semantics.ScopeResolution.InheritFunctionsOnly">
            <summary>
              Inherit only function symbols from the parent scope.
            </summary>
        </member>
        <member name="F:Bicep.Core.Semantics.ScopeResolution.GlobalsOnly">
            <summary>
              Only symbols that have not been declared by a parent (or above) scope.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.SemanticModel.AllResources">
            <summary>
            Gets the metadata of all resources for the semantic model including parameters and outputs of modules.
            </summary>
        </member>
        <member name="P:Bicep.Core.Semantics.SemanticModel.DeclaredResources">
            <summary>
            Gets the metadata of resources declared for the semantic model (using the resource declaration).
            Does not include parameters and outputs of modules.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetConfigDiagnostics">
            <summary>
            Gets all diagnostics raised by loading Bicep config for this template.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetSemanticDiagnostics">
            <summary>
            Gets all the semantic diagnostics unsorted. Does not include parser and lexer diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetAnalyzerDiagnostics">
            <summary>
            Gets all the analyzer diagnostics unsorted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetAllDiagnostics">
            <summary>
            Cached diagnostics from compilation
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.HasErrors">
            <summary>
            Immediately runs diagnostics and returns true if any errors are detected
            </summary>
            <returns>True if analysis finds errors</returns>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetSymbolInfo(Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Returns the symbol that was bound to the specified syntax node. Will return null for syntax nodes that never get bound to symbols. Otherwise,
            a symbol will always be returned. Binding failures are represented with a non-null error symbol.
            </summary>
            <param name="syntax">the syntax node</param>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.FindReferences(Bicep.Core.Semantics.Symbol)">
            <summary>
            Returns all syntax nodes that represent a reference to the specified symbol. This includes the definitions of the symbol as well.
            Unused declarations will return 1 result. Unused and undeclared symbols (functions, namespaces, for example) may return an empty list.
            </summary>
            <param name="symbol">The symbol</param>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.FindReferences(Bicep.Core.Semantics.Symbol,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Returns all syntax nodes that represent a reference to the specified symbol in the given syntax tree.  This includes the definitions
            of the symbol as well, if inside the given syntax tree.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="syntaxTree">The syntax tree to traverse</param>
        </member>
        <member name="P:Bicep.Core.Semantics.SemanticModel.Root">
            <summary>
            Gets the file that was compiled.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SemanticModel.GetAdditionalParamsSemanticDiagnostics">
            <summary>
            Gets all the params semantic diagnostics unsorted. Does not include params parser and params lexer diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bicep.Core.Semantics.Symbol.Name">
            <summary>
            Gets the name of the symbol. Returns an empty string if the symbol is not named.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SymbolExtensions.GetDeclaredArgumentType(Bicep.Core.Semantics.IFunctionSymbol,System.Int32,Bicep.Core.Semantics.FunctionOverloadBuilder.GetFunctionArgumentType)">
            <summary>
            Returns the expected argument type for a particular argument position, using function overload information.
            </summary>
            <param name="functionSymbol">The function symbol to inspect</param>
            <param name="argIndex">The index of the function argument</param>
            <param name="getAssignedArgumentType">Function to look up the assigned type of a given argument</param>
        </member>
        <member name="M:Bicep.Core.Semantics.SymbolExtensions.CanBeReferenced(Bicep.Core.Semantics.DeclaredSymbol)">
            <summary>
              Certain declarations (outputs and metadata) define symbols which can't be referenced by name. This method allows you to filter out non-referencable symbols.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SymbolHelper.TryGetSymbolInfo(Bicep.Core.Semantics.IBinder,System.Func{Bicep.Core.Syntax.SyntaxBase,Bicep.Core.TypeSystem.TypeSymbol},Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Returns the symbol that was bound to the specified syntax node. Will return null for syntax nodes that never get bound to symbols. Otherwise,
            a symbol will always be returned. Binding failures are represented with a non-null error symbol.
            </summary>
            <param name="binder">the binder </param>
            <param name="getDeclaredTypeFunc">lambda to retrieve declared type from syntax base (to avoid cyclic dependencies)</param>
            <param name="syntax">the syntax node</param>
        </member>
        <member name="T:Bicep.Core.Semantics.SymbolHierarchy">
            <summary>
            Represents the hierarchy between symbols. For example, all global declarations have a parent that is a FileSymbol. All local scopes
            have parents who can be a local scope or the global scope represented by the FileSymbol.
            </summary>
        </member>
        <member name="M:Bicep.Core.Semantics.SymbolHierarchy.AddRoot(Bicep.Core.Semantics.Symbol)">
            <summary>
            Adds a root node and indexes the parents for all child nodes recursively.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:Bicep.Core.Semantics.SymbolHierarchy.GetParent(Bicep.Core.Semantics.Symbol)">
            <summary>
            Gets the parent of the specified symbol. Returns null for root nodes. Throws an exception for nodes that have not been indexed.
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Bicep.Core.Semantics.YamlObjectParser.ExtractTokenFromObject(System.String)">
            <summary>
            Deserialize raises an exception if the fileContent is not a valid YAML object
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.ArchiveMetadataDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.SourceFileInfoDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.SourceCodeDocumentPathLink">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.SourceCodeDocumentPathLinkArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.SourceCodeRange">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.IEnumerableSourceFileInfoDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.IReadOnlyDictionaryStringSourceCodeDocumentPathLinkArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceArchive.MetadataSerializationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceArchive.PackSourcesIntoStream(Bicep.Core.Registry.IModuleDispatcher,Bicep.Core.Workspaces.SourceFileGrouping,System.String)">
            <summary>
            Bundles all the sources from a compilation group (thus source for a bicep file and all its dependencies
            in JSON form) into an archive (as a stream)
            </summary>
            <returns>A .tgz file as a binary stream</returns>
        </member>
        <member name="T:Bicep.Core.SourceCode.SourceCodeDocumentLink`1">
            <summary>
            Represents a link from a range inside a source file that points to another source file
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="Range">Span of the origin of this link in the source file (e.g. the module path of a module declaration syntax line)</param>
            <param name="Target">The target file for this link (e.g. the path of the source file pointed to by the module path inside the source.tgz file)</param>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceCodeDocumentLink`1.#ctor(Bicep.Core.SourceCode.SourceCodeRange,`0)">
            <summary>
            Represents a link from a range inside a source file that points to another source file
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="Range">Span of the origin of this link in the source file (e.g. the module path of a module declaration syntax line)</param>
            <param name="Target">The target file for this link (e.g. the path of the source file pointed to by the module path inside the source.tgz file)</param>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceCodeDocumentLink`1.Range">
            <summary>Span of the origin of this link in the source file (e.g. the module path of a module declaration syntax line)</summary>
        </member>
        <member name="P:Bicep.Core.SourceCode.SourceCodeDocumentLink`1.Target">
            <summary>The target file for this link (e.g. the path of the source file pointed to by the module path inside the source.tgz file)</summary>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceCodeDocumentLinkHelper.GetAllModuleDocumentLinks(Bicep.Core.Workspaces.SourceFileGrouping)">
             <summary>
             Retrieves all document links for module declaration syntax lines
             </summary>
             <param name="sourceFileGrouping"></param>
             <returns></returns>
             <example>
               ```bicep
               module mod1 'subfolder/module1.bicep' = {
               ```bicep
            
               will cause a DocumentLink from the source location 'subfolder/module1.bicep' to the source file
               URI resolved from "subfolder/module1.bicep"
             </example>
        </member>
        <member name="M:Bicep.Core.SourceCode.SourceCodePathHelper.MapPathsToDistinctRoots(System.String,System.String[])">
             <summary>
             Finds the list of all distinctFolders in the given pathsArray that are not subfolders of any path,
             i.e. the smallest set of distinctFolders so that you can express any of the pathsArray as relative
             to one of the roots, without having to use "..".
            
             Excluding then handling of files under the cache root, each given path will be under one and only one root.
            
             The intention is to keep only the portion of the source user paths that is necessary.
             <returns>
             A mapping of the original paths to the root path that they should be relative to.
             </returns>
             </summary>
             <example>
            
               c:/users/username/repos/deployment/src/main.bicep
               c:/users/username/repos/deployment/src/modules/module1.bicep
               c:/users/username/repos/deployment/src/modules/module2.bicep
               c:/users/username/repos/deployment/shared/shared1.bicep
               d:/repos/deployment/main.json
            
             the calculated distinct roots are:
            
               c:/users/username/repos/deployment/src
               c:/users/username/repos/deployment/shared
               d:/repos/deployment
            
             so the returned map is:
            
               c:/users/username/repos/deployment/src/main.bicep            => c:/users/username/repos/deployment/src
               c:/users/username/repos/deployment/src/modules/module1.bicep => c:/users/username/repos/deployment/src
               c:/users/username/repos/deployment/src/modules/module2.bicep => c:/users/username/repos/deployment/src
               c:/users/username/repos/deployment/shared/shared1.bicep      => c:/users/username/repos/deployment/shared
               d:/repos/deployment/main.json                                => d:/repos/deployment
               
             </example>
        </member>
        <member name="T:Bicep.Core.Syntax.AccessExpressionSyntax">
            <summary>
            Represents a syntax node that accesses a property or index of a base value.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ArraySyntax.Children">
            <summary>
            Gets the list of child nodes. Children may not necessarily be array item nodes.
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.AstVisitor">
            <summary>
            Visits an <see href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree (AST)</see>.
            </summary>
            <remarks>
            The Bicep syntax tree is always a <see href="https://en.wikipedia.org/wiki/Parse_tree">concrete syntax tree</see>.
            The visitor visits syntax nodes except for terminal symbols (tokens) so that the Bicep syntax tree is traversed as an AST.
            </remarks>
        </member>
        <member name="T:Bicep.Core.Syntax.BinaryOperator">
            <summary>
            Represents an operator acting on a pair of expressions.
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.LogicalOr">
            <summary>
            Boolean OR
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.LogicalAnd">
            <summary>
            Boolean AND
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Equals">
            <summary>
            Equality
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.NotEquals">
            <summary>
            Not equals
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.EqualsInsensitive">
            <summary>
            Case-insensitive equals
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.NotEqualsInsensitive">
            <summary>
            Case-insensitive not equals
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.LessThanOrEqual">
            <summary>
            Less than or equal
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.GreaterThanOrEqual">
            <summary>
            Greater than or equal
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Add">
            <summary>
            Addition
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Subtract">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Multiply">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Divide">
            <summary>
            Division
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Modulo">
            <summary>
            Modulo
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.BinaryOperator.Coalesce">
            <summary>
            Coalesce
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.CstVisitor">
            <summary>
            Visits a <see href="https://en.wikipedia.org/wiki/Parse_tree">concrete syntax tree (CST)</see>.
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.ExpressionSyntax">
            <summary>
            Represents a syntax node that participates in expressions.
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.IdentifierSyntax">
            <summary>
            Represents a well-formed identifier.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ImportedSymbolsListSyntax.Children">
            <summary>
            Gets the child syntax nodes. May return nodes that aren't valid symbol imports.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.ISyntaxHierarchy.GetParent(Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Gets the parent of the specified node. Returns null for root nodes. Throws an exception for nodes that have not been indexed.
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Bicep.Core.Syntax.ISyntaxHierarchyExtensions.EnumerateAncestorsUpwards(Bicep.Core.Syntax.ISyntaxHierarchy,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Enumerate ancestor nodes in ascending order.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.ISyntaxHierarchyExtensions.GetAllAncestors``1(Bicep.Core.Syntax.ISyntaxHierarchy,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Gets all ancestor nodes assignable to <typeparamref name="TSyntax" /> in descending order
            from the top of the tree.
            </summary>
            <param name="syntax">The syntax node.</param>
            <typeparam name="TSyntax">The type of node to query.</typeparam>
            <returns>The list of ancestors.</returns>
        </member>
        <member name="M:Bicep.Core.Syntax.ISyntaxHierarchyExtensions.GetNearestAncestor``1(Bicep.Core.Syntax.ISyntaxHierarchy,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Gets the nearest ancestor assignable to <typeparamref name="TSyntax" /> above <paramref name="syntax" />
            in an ascending walk towards the root of the syntax tree.
            </summary>
            <param name="syntax">The syntax node.</param>
            <typeparam name="TSyntax">The type of node to query.</typeparam>
            <returns>The nearest ancestor or <c>null</c>.</returns>
        </member>
        <member name="T:Bicep.Core.Syntax.LocalVariableSyntax">
            <summary>
            Represents a local variable (such as the item or index variable in loops).
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ObjectSyntax.Children">
            <summary>
            Gets the child syntax nodes. May return nodes that aren't valid object properties.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ObjectSyntax.Properties">
            <summary>
            Gets the object properties. May return duplicate properties.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ObjectSyntax.Resources">
            <summary>
            Gets the child resources of this object.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.ObjectSyntaxExtensions.ToNamedPropertyDictionary(Bicep.Core.Syntax.ObjectSyntax)">
            <summary>
            Converts a syntactically valid object syntax node to a dictionary mapping property name strings to property syntax nodes. Returns the first property in the case of duplicate names.
            </summary>
            <param name="syntax">The object syntax node</param>
        </member>
        <member name="M:Bicep.Core.Syntax.ObjectSyntaxExtensions.TryGetPropertyByName(Bicep.Core.Syntax.ObjectSyntax,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Returns the specified property by name on any valid or invalid object syntax node if there is exactly one property by that name.
            Returns null if the property does not exist or if multiple properties by that name exist. This method is intended for a single
            one-off property lookup and avoids allocation of a dictionary. If you need to make multiple look ups, use another extension in this class.
            </summary>
            <param name="syntax">The object syntax node</param>
            <param name="propertyName">The property name</param>
            <param name="keyComparison">The comparison algorithm to use when matching object properties to the supplied name</param>
        </member>
        <member name="P:Bicep.Core.Syntax.ObjectTypeSyntax.Children">
            <summary>
            Gets the child syntax nodes. May return nodes that aren't valid object type properties.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ObjectTypeSyntax.Properties">
            <summary>
            Gets the object property types. May return duplicate property types.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.ParameterDeclarationSyntax.ParameterType">
            <summary>
            Gets the declared type syntax of this parameter declaration. Certain parse errors will cause it to be null.
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.Rewriters.CallbackRewriter">
            <summary>
            Rewriter that allows use of a callback to rewrite any type of node.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.Rewriters.CallbackRewriter.#ctor(System.Func{Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Syntax.SyntaxBase})">
            <summary>
            Creates a new rewriter with the specified callback.
            </summary>
            <param name="callback">The rewrite callback function that will be invoked on each node.</param>
        </member>
        <member name="P:Bicep.Core.Syntax.SkippedTriviaSyntax.Elements">
            <summary>
            The elements that were skipped.
            </summary>
        </member>
        <member name="P:Bicep.Core.Syntax.SkippedTriviaSyntax.Diagnostics">
            <summary>
            Diagnostics to raise.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.StringSyntax.GetInnerSpan">
            <summary>
            Returns the span between the quotes for a string token.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.StringSyntaxExtensions.IsInterpolated(Bicep.Core.Syntax.StringSyntax)">
            <summary>
            Checks if the syntax node contains an interpolated string or a literal string.
            </summary>
            <param name="syntax">The string syntax node</param>
        </member>
        <member name="M:Bicep.Core.Syntax.StringSyntaxExtensions.TryGetLiteralValue(Bicep.Core.Syntax.StringSyntax)">
            <summary>
            Try to get the string literal value for a syntax node. Returns null if the string is interpolated.
            </summary>
            <param name="syntax">The string syntax node</param>
        </member>
        <member name="M:Bicep.Core.Syntax.StringTypeLiteralSyntax.GetInnerSpan">
            <summary>
            Returns the span between the quotes for a string token.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxBase.ToString">
            <summary>
            Returns a string that mirrors the original text of the syntax node.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxExtensions.ToAccessExpressionStack(Bicep.Core.Syntax.AccessExpressionSyntax)">
            <remarks>
            If a chain of accesses starts with a "safe" access (e.g., <code><i>base</i>[?0].property</code> or <code><i>base</i>.?some.deeply.nested.property</code>),
            it may short-circuit at runtime, meaning that <code>.deeply.nested.property</code> will only be evaluated if <code><i>base</i>.?some</code> returns a non-null value.
            The upshot of this is that we will need to mark <code><i>base</i>.?some</code> as non-nullable when evaluating any chained property accesses, then
            mark the resultant type as nullable iff the original "safe" access might return null.
            Because of this requirement, it's necessary to evaluate the full access chain and determine if it is kicked off by a .? or [?] operator rather than
            just evaluating <code>syntax.BaseExpression</code> recursively
            </remarks>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxExtensions.AccessExpressionMatches(Bicep.Core.Syntax.AccessExpressionSyntax,Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Checks whether the a particular access expression is accessing an expression matching the target expression.
            For example, if the target expression is `'bar'`, this would return true for either `foo['bar']` or `foo.bar`.
            If the target expression is `myExpr`. this would return true for `foo[myExpr]`.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxHierarchy.GetParent(Bicep.Core.Syntax.SyntaxBase)">
            <summary>
            Gets the parent of the specified node. Returns null for root nodes. Throws an exception for nodes that have not been indexed.
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxLinqExtensions.FirstOrDefault``1(Bicep.Core.Syntax.SyntaxBase,System.Func{Bicep.Core.Syntax.SyntaxBase,System.Boolean})">
            <summary>
            Walks the specified syntax subtree and returns the first node found that matches a given  query
            </summary>
            <typeparam name="TSyntaxType">[optional] The type of tree node that is being searched for and returned</typeparam>
            <param name="source">The starting tree node</param>
            <param name="query">The function that indicates whether a node is the one being searched for</param>
            <returns>The first matching node found</returns>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxLinqExtensions.FirstOrDefault(Bicep.Core.Syntax.SyntaxBase,System.Func{Bicep.Core.Syntax.SyntaxBase,System.Boolean})">
            <summary>
            Walks the specified syntax subtree and returns the first node found that matches a given query
            </summary>
            <param name="source">The starting tree node</param>
            <param name="query">The function that indicates whether a node is the one being searched for</param>
            <returns>The first matching node found</returns>
        </member>
        <member name="M:Bicep.Core.Syntax.SyntaxLinqExtensions.Any(Bicep.Core.Syntax.SyntaxBase,System.Func{Bicep.Core.Syntax.SyntaxBase,System.Boolean})">
            <summary>
            Walks the specified syntax subtree and returns true only if any node is found that matches a given query
            </summary>
            <param name="source">The starting tree node</param>
            <param name="query">The function that indicates whether a node one being searched for</param>
            <returns>True if any matching node is found</returns>
        </member>
        <member name="P:Bicep.Core.Syntax.TupleTypeSyntax.Children">
            <summary>
            Gets the list of child nodes. Children may not necessarily be tuple member nodes.
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.TypeVariableAccessSyntax">
            <summary>
            Represents a reference to a variable or parameter
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.UnaryOperator">
            <summary>
            Represents an operator acting on a single expression.
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.UnaryOperator.Not">
            <summary>
            Boolean NOT
            </summary>
        </member>
        <member name="F:Bicep.Core.Syntax.UnaryOperator.Minus">
            <summary>
            Unary minus operator (used to construct negative numbers)
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.VariableAccessSyntax">
            <summary>
            Represents a reference to a variable or parameter
            </summary>
        </member>
        <member name="T:Bicep.Core.Syntax.Visitors.CallbackVisitor">
            <summary>
            Visitor that executes a callback before visiting a tree node.
            </summary>
        </member>
        <member name="M:Bicep.Core.Syntax.Visitors.CallbackVisitor.#ctor(System.Func{Bicep.Core.Syntax.SyntaxBase,System.Boolean})">
            <summary>
            Creates a new visitor with the specified callback.
            </summary>
            <param name="callback">The callback function that will be invoked before visiting a node. Return true to visit the node (the callback will be invoked on each child node). Return false to skip this node and its children.</param>
        </member>
        <member name="M:Bicep.Core.Syntax.Visitors.SyntaxAggregator.Aggregate``2(Bicep.Core.Syntax.SyntaxBase,``0,System.Func{``0,Bicep.Core.Syntax.SyntaxBase,``0},System.Func{``0,``1},System.Func{``0,Bicep.Core.Syntax.SyntaxBase,System.Boolean})">
            <summary>
            Walks the specified syntax subtree and aggregates the results of queries against it.
            </summary>
            <typeparam name="TAccumulate">the type of accumulated value per tree node</typeparam>
            <typeparam name="TResult">the type of the final result of the aggregation</typeparam>
            <param name="source">The starting tree node</param>
            <param name="seed">Initial value</param>
            <param name="function">The function that updates the accumulated value given the current value and a tree node</param>
            <param name="resultSelector">The function that converts the final accumulated value into a result.</param>
            <param name="continuationFunction">Optional function to stop processing based on current accumulated value. You can use it to stop processing when a condition is met by returning false. If null, all tree nodes will be processed.</param>
            <returns></returns>
        </member>
        <member name="T:Bicep.Core.Tracing.AzureEventSourceListenerFactory">
            <summary>
            Listens to SDK events and redirects them to Trace.WriteLine(). In certain cases, we will strip HTTP headers out from the events that are written out.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.CompileTimeConstantVisitor">
            <summary>
            Visitor used to collect errors caused by expression assignment to a compile-time constant property.
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.DeclaredTypeAssignment.DeclaringSyntax">
            <summary>
            Gets the node whose declared type this assignment represents. This is primarily used to resolve nested discriminated object types.
            </summary>
            <remarks>When declared type is requested for a node that is part of a declaration body (INamedDeclarationSyntax, ObjectSyntax, ArraySyntax,
            ObjectPropertySyntax, etc.), you may see DeclaringSyntax to be set to the same node. When requesting declared type for a VariableAccessSyntax,
            PropertyAccessSyntax or ArrayAccessSyntax node, it will point to a corresponding node within the referenced declaration. The value may
            be null if there is not enough information in the declaration body.</remarks>
        </member>
        <member name="F:Bicep.Core.TypeSystem.DeclaredTypeFlags.None">
            <summary>
            No flags are specified.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.DeclaredTypeFlags.Constant">
            <summary>
            The assigned value is supposed to be a compile-time constant.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.DeclaredTypeManager.GetNonNullableTypeAssignment(Bicep.Core.Syntax.SyntaxBase)">
            <remarks>
            This function should be used instead of <see cref="M:Bicep.Core.TypeSystem.DeclaredTypeManager.GetDeclaredTypeAssignment(Bicep.Core.Syntax.SyntaxBase)" /> when the caller is certain that the null branch of a nullable type
            is irrelevant (such as when syntax representing a non-null value has been supplied for a location whose type is nullable).
            </remarks>
        </member>
        <member name="M:Bicep.Core.TypeSystem.DeclaredTypeManager.GetDeclaredResourceType(Bicep.Core.Syntax.ResourceTypeSyntax)">
            <summary>
            Returns the declared type of the parameter/output based on a resource type.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.DeclaredTypeManager.GetDeclaredResourceType(Bicep.Core.Syntax.ResourceDeclarationSyntax)">
            <summary>
            Returns the declared type of the resource body (based on the type string).
            Returns the same value for single resource or resource loops declarations.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.DeployTimeConstantContainerVisitor">
            <summary>
            Collects syntaxes that only accept deploy-time constant values (deploy-time constant containers).
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.FunctionFlags">
            <summary>
            Flags that may be placed on functions to modify their behavior.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.Default">
            <summary>
            The default, no restrictions
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ParamDefaultsOnly">
            <summary>
            The function can only be used in parameter default values.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.RequiresInlining">
            <summary>
            The function requires inlining.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ParameterDecorator">
            <summary>
            The function can be used as a parameter decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.VariableDecorator">
            <summary>
            The function can be used as a variable decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ResourceDecorator">
            <summary>
            The function can be used as a resource decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ModuleDecorator">
            <summary>
            The function can be used as a module decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.OutputDecorator">
            <summary>
            The  function can be used as an output decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ProviderDecorator">
            <summary>
            The  function can be used as a provider decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ModuleSecureParameterOnly">
            <summary>
            The function can be used in direct assignment to a module parameter with @secure decorator
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.MetadataDecorator">
            <summary>
            The function can be used as a metadata decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.TypeDecorator">
            <summary>
            The function can be used as a type decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.FunctionDecorator">
            <summary>
            The function can be used as a function decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.DirectAssignment">
            <summary>
            The function can be used in direct assignment only
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ResourceOrModuleDecorator">
            <summary>
            The function can be used as a resource or module decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ParameterOrTypeDecorator">
            <summary>
            The function can be used as a parameter or type decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.ParameterOutputOrTypeDecorator">
            <summary>
            The function can be used as a parameter, output, or type decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.TypeVariableOrFunctionDecorator">
            <summary>
            The function can be used as a type or variable decorator.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionFlags.AnyDecorator">
            <summary>
            The function can be used as a decorator anywhere.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionMatchResult.Mismatch">
            <summary>
            The function overload does not match the specified arguments. This may be due to a wrong number of arguments or incorrect types.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionMatchResult.PotentialMatch">
            <summary>
            The argument counts are valid but all arguments are of type "any"
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.FunctionMatchResult.Match">
            <summary>
            The argument counts are valid and at least one argument matched and is of non-any type.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Providers.IResourceTypeProvider.TryGetDefinedType(Bicep.Core.TypeSystem.Types.NamespaceType,Bicep.Core.Resources.ResourceTypeReference,Bicep.Core.TypeSystem.ResourceTypeGenerationFlags)">
            <summary>
            Tries to get a resource type from the set of well known resource types. Returns null if none is available.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Providers.IResourceTypeProvider.TryGenerateFallbackType(Bicep.Core.TypeSystem.Types.NamespaceType,Bicep.Core.Resources.ResourceTypeReference,Bicep.Core.TypeSystem.ResourceTypeGenerationFlags)">
            <summary>
            Tries to generate a fallback resource type definition, if possible. Returns null if this is not possible.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Providers.IResourceTypeProvider.HasDefinedType(Bicep.Core.Resources.ResourceTypeReference)">
            <summary>
            Checks whether the type exists in the set of well known resource types.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Providers.IResourceTypeProvider.GetAvailableTypes">
            <summary>
            Returns the full list of available types defined by this provider.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceFlags.ReadOnly">
            <summary>
            The resource must be used with the 'existing' keyword.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.ResourceTypeGenerationFlags">
            <summary>
            Flags that influence the generation of resource types.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceTypeGenerationFlags.None">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceTypeGenerationFlags.ExistingResource">
            <summary>
            Generating a definition for a resource using the 'existing' keyword.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceTypeGenerationFlags.HasParentDefined">
            <summary>
            This resource type definition has a parent resource defined.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.ResourceTypeGenerationFlags.NestedResource">
            <summary>
            Generating a definition for a syntactically nested resource. Do not use this flag for resources that need the "parent" property.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeAssignmentVisitor.GetExpressionedPropertyType(Bicep.Core.TypeSystem.Types.ObjectType,Bicep.Core.Parsing.IPositionable)">
            <summary>
            Gets the type of the property whose name is an expression.
            </summary>
            <param name="baseType">The base object type</param>
            <param name="propertyExpressionPositionable">The position of the property name expression</param>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeCollapser.TryCollapse(Bicep.Core.TypeSystem.Types.UnionType)">
            <remarks>
            How and whether multiple types can be collapsed varies by type, so a finite state machine is used so that each
            type can define its collapsing rules separately and we can choose which ruleset to use based on the first 1-2
            union members.
            </remarks>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.TryCollapseTypes(System.Collections.Generic.IEnumerable{Bicep.Core.TypeSystem.ITypeReference})">
            <summary>
            Try to collapse multiple types into a single (non-union) type. Returns null if this is not possible.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.CreateTypeUnion(System.Collections.Generic.IEnumerable{Bicep.Core.TypeSystem.ITypeReference})">
            <summary>
            Collapses multiple types into either:
            * The 'never' type, if there are no types in the source list.
            * A single type, if the source types can be collapsed into a single type.
            * A union type.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.GetOrderedTypeNames(System.Collections.Generic.IEnumerable{Bicep.Core.TypeSystem.ITypeReference})">
            <summary>
            Returns an ordered enumerable of type names.
            </summary>
            <param name="types">The types to get ordered names for.</param>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.CreateTypeUnion(Bicep.Core.TypeSystem.ITypeReference[])">
            <summary>
            Collapses multiple types into either:
            * The 'never' type, if there are no types in the source list.
            * A single type, if the source types can be collapsed into a single type.
            * A union type.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.TryCreateTypeLiteral(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Attempt to create a type symbol for a literal value.
            </summary>
            <param name="token">The literal value (expressed as a Newtonsoft JToken)</param>
            <returns></returns>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.GetNamedPropertyType(Bicep.Core.TypeSystem.Types.ObjectType,Bicep.Core.Parsing.IPositionable,System.String,System.Boolean,Bicep.Core.Diagnostics.IDiagnosticWriter)">
            <summary>
            Gets the type of the property whose name we can obtain at compile-time.
            </summary>
            <param name="baseType">The base object type</param>
            <param name="propertyExpressionPositionable">The position of the property name expression</param>
            <param name="propertyName">The resolved property name</param>
            <param name="shouldWarn">Whether diagnostics with a configurable level should be issued as warnings</param>
            <param name="diagnostics">Sink for diagnostics are not included in the return type symbol</param>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.TryRemoveNullability(Bicep.Core.TypeSystem.TypeSymbol)">
            <remarks>
            If the provided type is a union of <code>null</code> and one or more other types, this function will return a union with the <code>null</code>
            branch removed. For example, <code>null | string</code> would be transformed to <code>string</code>, and <code>null | string | int</code> would be
            transformed to <code>string | int</code>.
            Otherwise, this method will return null.
            </remarks>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.WouldBeAssignableIfNonNullable(Bicep.Core.TypeSystem.TypeSymbol,Bicep.Core.TypeSystem.TypeSymbol,Bicep.Core.TypeSystem.TypeSymbol@)">
            <summary>
            Determines if the provided candidate type would be assignable to the provided expected type if the former were stripped of its nullability.
            </summary>
            <remarks>
            This function will return <code>false</code> if the provided candidate type is not nullable, even if it would be assignable to the provided expected
            type without modification.
            </remarks>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.GetMinAndMaxLengthOfStringified(Bicep.Core.TypeSystem.Types.IntegerType)">
            <summary>
            Determines the possible range of lengths a supplied IntegerType will have when stringified under the invariant culture.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeHelper.GetMinAndMaxLengthOfStringified(Bicep.Core.TypeSystem.TypeSymbol)">
            <summary>
            Determines the possible range of lengths a supplied TypeSymbol will have when stringified under the invariant culture.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Error">
            <summary>
            The error type.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Never">
            <summary>
            Empty union of types.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Any">
            <summary>
            Any type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Primitive">
            <summary>
            Primitive value type like string, int, bool, object, or array.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Object">
            <summary>
            Named object type. (Examples: ResourceGroup, ParameterModifier, etc.)
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Resource">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Union">
            <summary>
            Union of multiple types.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.StringLiteral">
            <summary>
            String literal type.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.DiscriminatedObject">
            <summary>
            Discriminated object type.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Namespace">
            <summary>
            Namespace type.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.ResourceScopeReference">
            <summary>
            A reference to a resource scope.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Module">
            <summary>
            Module type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Test">
            <summary>
            Test type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Import">
            <summary>
            Import type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.Lambda">
            <summary>
            Lambda type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.BooleanLiteral">
            <summary>
            Boolean literal type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.IntegerLiteral">
            <summary>
            Integer literal type
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.TypeReference">
            <summary>
            A reference to a type symbol
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeKind.UnboundResourceDerivedType">
            <summary>
            A kind that is not yet known because the resource type from which it is derived has not yet been resolved.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeSymbol.FormatNameForCompoundTypes">
            <summary>
            Returns a name for this type that was formatted for inclusion in the name of another compount type.
            For most types, this is the same as name.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.TypeSymbolValidationFlags">
            <summary>
            Flags that may be placed on type symbols to modify their behavior.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.WarnOnTypeMismatch">
            <summary>
            Display warning diagnostics instead of errors if there is a type mismatch.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.AllowLooseAssignment">
            <summary>
            Permits assignment from string/int/bool to string/int/bool literal, respectively.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.PreventAssignment">
            <summary>
            Prevents all assignment of this type.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.IsSecure">
            <summary>
            Allows assigning a secret reference
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.IsStringFilePath">
            <summary>
            Indicates that this type will be a String file path and we should offer completions for it
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.IsStringJsonFilePath">
            <summary>
            Indicates that this type will be a String file path to a JSON file and we should offer completions for it where files wih .json extension are prioritised
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.IsStringYamlFilePath">
            <summary>
            Indicates that this type will be a String file path to a YAML file and we should offer completions for it where files wih .yaml and .yml extension are prioritised
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.IsResourceTypeIdentifier">
            <summary>
            Indicates that this type will be a string that contains a fully qualified resource type (e.g., 'Microsoft.Resource/deployments@2022-09-01').
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.TypeSymbolValidationFlags.WarnOnPropertyTypeMismatch">
            <summary>
            Display warning diagnostics instead of errors if an unknown property is accessed or supplied, a required property is not provided, a read-only property is supplied, or a write-only property is accessed.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Types.DiscriminatedObjectType.TryGetDiscriminatorProperty(System.String)">
            <summary>
            Returns the discriminator property if the given property key matches the discriminator key.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.IUnresolvedResourceDerivedType">
            <summary>
            IUnresolvedResourceDerivedType represents a type expressed via a reference to a resource type or partial body thereof
            (e.g., Microsoft.KeyVault/vaults@2022-07-01#/properties/accessPolicies/items). This type is "unresolved" because it
            was used in the type of a parameter, output, or exported type definition in an ARM JSON template and must be matched
            by name to a concrete resource definition based on the configured providers of the consuming Bicep module.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Types.LambdaType.GetArgumentType(System.Int32)">
            <summary>
            Gets the argument type at a particular position, including optional args.
            <remarks>
            The index must be valid, or this method will throw.
            </remarks>
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.Types.ModuleType.ValidParentScopes">
            <summary>
            Represents the possible scopes that this module type can be deployed at.
            Does not account for cross-scope deployment limitations.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.ObjectType">
            <summary>
            Represents an object with any property of any type.
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.Types.ResourceType.ValidParentScopes">
            <summary>
            Represents the possible scopes that this resource type can be deployed at.
            Does not account for cross-scope deployment limitations.
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.Types.ResourceType.ReadOnlyScopes">
            <summary>
            Represents the scopes in which this resource type may only be used with the `existing` keyword.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.TupleType">
            <summary>
            Represents an array with a fixed number of items, each of which has an independently defined type.
            </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.Types.TupleType.ToTypedArray">
            <summary>
            Recharacterize this type as a TypedArrayType containing a union of the types of the tuple members. Unlike a tuple, a typed array makes no assertions about which indices contain a more specific type.
            Intended to be used when a tuple's contents are reordered (e.g., via `sys.sort`) or when some members may have been removed (e.g., via `sys.filter`) but no new members have been added and no existing members have been transformed.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.Required">
            <summary>
            The property is required.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.Constant">
            <summary>
            The property only accepts compile-time constants.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.ReadOnly">
            <summary>
            The property is read-only.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.WriteOnly">
            <summary>
            The property is write-only.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.DeployTimeConstant">
            <summary>
            The property only accepts deploy-time constants whose values must be known at the start of the deployment, and do not require inlining.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.DisallowAny">
            <summary>
            Blocks assignment of the "any" type to the property having this flag.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.ReadableAtDeployTime">
            <summary>
            The property's value is readable at deploy-time (e.g., id, name, type, and apiVersion).
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.LoopVariant">
            <summary>
            The property must be loop-variant. In other words, the value of the property must change
            based on the value of the loop item or index variables. This flag has no effect outside of top-level properties.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.AllowImplicitNull">
            <summary>
            On non-required properties, this allows the property type to be treated as "&lt;x$gt; | null" (where &lt;x&gt; is the current property type)
            for the purposes of type checking the value assigned to the property.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.FallbackProperty">
            <summary>
            Property that is not defined in Swagger, but still might be valid. We will show warning instead error.
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.SystemProperty">
            <summary>
            Language system property, i.e. id, type, api-version
            </summary>
        </member>
        <member name="F:Bicep.Core.TypeSystem.Types.TypePropertyFlags.ResourceIdentifier">
            <summary>
            Resource identifier property (e.g. name, uniqueName)
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.TypeTemplate">
            <summary>
            A type that must be parameterized in order to be used.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.TypeType">
            <summary>
            The type of a symbol that may only be used as a type, not a value.
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.UnresolvedResourceDerivedPartialObjectType">
            <summary>
            An IUnresolvedResourceDerivedType to use as a branch of a DiscriminatedObjectType
            </summary>
        </member>
        <member name="T:Bicep.Core.TypeSystem.Types.UnresolvedResourceType">
             <summary>
             UnresolvedResourceType represents a resource type that has been specified but not validated.
            
             Generally this means the resource type is used as a parameter or an output of a module. The resolving
             of the type has yet to occur because it must take place in the context of the consuming module.
             </summary>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeValidator.GetCompileTimeConstantViolation(Bicep.Core.Syntax.SyntaxBase,Bicep.Core.Diagnostics.IDiagnosticWriter)">
            <summary>
            Gets the list of compile-time constant violations. An error is logged for every occurrence of an expression that is not entirely composed of literals.
            It may return inaccurate results for malformed trees.
            </summary>
            <param name="expression">the expression to check for compile-time constant violations</param>
            <param name="diagnosticWriter">Diagnostic writer instance</param>
        </member>
        <member name="M:Bicep.Core.TypeSystem.TypeValidator.AreTypesAssignable(Bicep.Core.TypeSystem.TypeSymbol,Bicep.Core.TypeSystem.TypeSymbol)">
            <summary>
            Checks if a value of the specified source type can be assigned to the specified target type. (Does not validate properties/schema on object types.)
            </summary>
            <param name="sourceType">The source type</param>
            <param name="targetType">The target type</param>
            <returns>Returns true if values of the specified source type are assignable to the target type. Returns false otherwise or null if assignability cannot be determined.</returns>
        </member>
        <member name="P:Bicep.Core.TypeSystem.TypeValidator.UnionTypeMemberViabilityInfo.UnionTypeMemberEvaluated">
            <summary>
            The type being checked for assignability and narrowing
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.TypeValidator.UnionTypeMemberViabilityInfo.NarrowedType">
            <summary>
            The narrowed type. Will be null if the type is unassignable
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.TypeValidator.UnionTypeMemberViabilityInfo.Diagnostics">
            <summary>
            Any warning or informational diagnostics raised during type narrowing
            </summary>
        </member>
        <member name="P:Bicep.Core.TypeSystem.TypeValidator.UnionTypeMemberViabilityInfo.Errors">
            <summary>
            Any error-level diagnostics raised during type narrowing
            </summary>
        </member>
        <member name="M:Bicep.Core.Utils.DirHelper.GetTempPath">
            <summary>
            Returns path inside TEMP/TMP that is controlled entirely by Bicep.
            </summary>
        </member>
        <member name="M:Bicep.Core.Utils.Result`2.Unwrap">
            <summary>
            Returns the successful result, assuming success. Throws an exception if not.
            This should only be called if you've already verified that the result is successful.
            </summary>
        </member>
        <member name="F:Bicep.Core.Workspaces.BicepSourceFileKind.BicepFile">
            <summary>
            A Bicep file containing parameter declarations, resources, variables, outputs,
            and references to other modules. This is sometimes known as a Bicep module.
            </summary>
        </member>
        <member name="F:Bicep.Core.Workspaces.BicepSourceFileKind.ParamsFile">
            <summary>
            A Bicep parameters file that may contain a reference to a Bicep file and may
            also set values of the parameters declared in the referenced Bicep file.
            </summary>
        </member>
        <member name="T:Bicep.Core.Workspaces.Workspace">
            <summary>
            Represents the active set of files and shared data that can be utilized to compile one or more bicep files.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApiVersionPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ApiVersionPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApiVersionPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TemplateLinkReferencePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TemplateLinkReferencePattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ModuleAliasNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ModuleAliasNameRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NewLineRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NewLineRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the OciNamespaceSegmentRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OciNamespaceSegmentRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigestRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DigestRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DigestRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigestRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigestRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagNameRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TagNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TagNameRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagNameRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TagNameRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ResourceTypePrefixPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePrefixPattern_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePattern_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ResourceTypePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ResourceTypePattern_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiHexDigitsLower">
            <summary>Supports searching for characters in or not in "0123456789abcdef".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FF0300000000FEFFFF07">
            <summary>Supports searching for characters in or not in "0123456789abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
